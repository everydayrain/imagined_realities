<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Imagined Realities</title>
  <subtitle>Cyber Security and Stray Thoughts.</subtitle>
  <link href="https://christopherbauer.xyz/feed/feed.xml" rel="self" />
  <link href="https://christopherbauer.xyz/" />
  <updated>2025-05-02T00:00:00Z</updated>
  <id>https://christopherbauer.xyz/</id>
  <author>
    <name>Christopher Bauer</name>
  </author>
  <entry>
    <title>Addressing Kali Crashes - Guacamole for Remote Desktop with Proxmox VMs</title>
    <link href="https://christopherbauer.xyz/blog/guac-proxmox-kali/" />
    <updated>2025-05-02T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/guac-proxmox-kali/</id>
    <content type="html">&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2025-05-03_10-48.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this post I describe why I installed Apache Guacamole (non-Docker) to connect to a Kali VM and how I did so.  I envision this post as part of a series in which I migrate from using Vagrant with VMWare workstation to Proxmox with OpenTofu and Ansible.&lt;/p&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;p&gt;Overview in Brief:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/guac-proxmox-kali/#what-to-do-about-frequent-kali-crashes&quot; class=&quot;primary&quot;&gt;What to do About Frequent Kali Crashes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/guac-proxmox-kali/#solution-design&quot; class=&quot;primary&quot;&gt;Solution Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/guac-proxmox-kali/#no-docker&quot; class=&quot;primary&quot;&gt;No Docker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/guac-proxmox-kali/#guide-to-installing-apache-guacamole&quot; class=&quot;primary&quot;&gt;Install Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;h2 id=&quot;what-to-do-about-frequent-kali-crashes&quot;&gt;What to do About Frequent Kali Crashes?&lt;/h2&gt;
&lt;p&gt;When I was working on my OSCP certification, I frequently encountered Kali crashes.  For those unfamiliar, Kali crashes seem to be commonly accepted, as though they were a &amp;quot;fact of life&amp;quot; among Kali users.  In my case, downloading a bunch of exploit code probably didn&#39;t help stability of the OS, but I&#39;d noticed that even fresh installs of Kali were sometimes wonky.  Maybe it was my IaC/VM install method, I&#39;m not laying blame here.  Bottom line was that I made sure I put in place an automated way to get a new copy of Kali up and running, typically through a VM.  This came to be seared into my brain as table stakes for running Kali.&lt;/p&gt;
&lt;p&gt;Up to now my solution to this combines Vagrant with VMWare Workstation on my primary machine.  Of course installing is only half the problem.  A fresh OS install still leaves you with a pile of work on configs and preference settings. What about my bespoke command notes and CLI history?  What about my CLI preferences  like vim keybinds, fzf search, or auto complete?  What about config files for tools like Feroxbuster or my Neovim config to make code easier to read?  There is a lot of provisioning required, as I&#39;m sure readers know.  I&#39;ve started moving my provisioning methods over to Ansible.&lt;/p&gt;
&lt;p&gt;To be clear, a discussion on the merits of whether to automate using Bash scripts or Ansible is outside the scope of this already long post.  Of course I could use Bash scripts, and indeed that is how I got started provisioning after Vagrant builds when I first began using Vagrant.  However, I never knew when something had broken with my scripts, they just marched on mindlessly.  Sure there are ways to ensure scripts report errors and exit responsibly and much more besides that I haven&#39;t learned yet.  However, with the popularity of Ansible as a provisioning solution, it turns out I&#39;ve already encountered it a few times without really understanding it in other contexts.  So, as an idempotent option it seemed like now was a time to start learning.&lt;/p&gt;
&lt;p&gt;When I switched to using Ansible with Vagrant, I noticed some issues I hadn&#39;t seen before.  Vagrant, in combination with VMWare and Ansible was starting to appear overburdened.  For one thing, running the Kali VM on my primary machine took up more overhead on than I would have liked.  That wasn&#39;t the fault of VMWare or Vagrant, I&#39;d just rather run the VM on another machine.  For another, it seemed that anytime I wanted to run Vagrant, I had to make sure all the extensions were properly updated, that the box selection was correct, and any manner of other minutiae.  While this is common, what was unusual was my bespoke solution made no prompt when I started, to resolve these issues before running.  This constelation of factors has had me wonderoing about running Kali on a Hypervisor I know well: Proxmox.  Ultimately, I&#39;d like to learn OpenTofu to provision Kali on Proxmox, but that is a topic for another post.&lt;/p&gt;
&lt;h3 id=&quot;wait-you-ve-got-more-constraints&quot;&gt;Wait, You&#39;ve Got More Constraints?&lt;/h3&gt;
&lt;p&gt;To resolve these issues, I wanted to outsource running Kali VM to my Proxmox server.  The hitch with this plan was that Proxmox doesn&#39;t share VMWare&#39;s seamless remote desktop option.  Instead, Proxmox&#39;s remote desktop options seem like, well lets call them the main cabin class of passangers on the Proxmox ship.  When you fire up a VM in Workstation, there isn&#39;t even an option to configure a remote desktop, it is simply baked in, with copy and paste, and runs immediately.&lt;/p&gt;
&lt;p&gt;There was another hitch with this plan though.  Proxmox after all, is not without options here.  The SPICE protocol that I&#39;ve traditionally used for remote desktop to my Proxmox VMs hasn&#39;t been working on my nodes despite troubleshooting.  VNC was, of course, an option as Proxmox&#39;s default that is automatically installed into new VMs.  However, I found working with the noVNC solution janky.  It&#39;s fine for initial install or to set up SSH.  It hasn&#39;t been a true replacement for a remote desktop.  I&#39;ve always found something off about it, as though I&#39;m working with a lag.  Most importantly, it hasn&#39;t, to my knowledge, offered copy and paste.  So whatever solution I devised had to implement something outside of Proxmox&#39;s own remote desktop options.&lt;/p&gt;
&lt;h2 id=&quot;solution-design&quot;&gt;Solution Design&lt;/h2&gt;
&lt;p&gt;I settled on setting up a standalone &lt;a href=&quot;https://guacamole.apache.org/&quot; class=&quot;primary&quot;&gt;Apache Guacamole&lt;/a&gt;  server.  For those unfamiliar, a Guacamole server (hereafter Guac) is unique as a remote desktop solution in that it utilizes HTML5 over a browser for a &amp;quot;clientless&amp;quot; connection architecture.  You set up the Guac server as well as a VNC server on the target, and simply connect by opening a browser.&lt;/p&gt;
&lt;p&gt;For my solution, I envisioned a simple design.  I would create an independent Guac server on a Proxmox VM (early tests showed an LXC wouldn&#39;t work with a build method) that would serve as the connection relay.  That would connect my local machine through any old browser to a standalone Kali VM, also provided by Proxmox.  To resolve the frequent Kali crashes, I would investigate OpenTofu at a later date, as my Ansible scripts for provisioning are ready today.&lt;/p&gt;
&lt;p&gt;Yes, this deisgn meant three computers/VMs rather than if I&#39;d hosted Guac on Kali itself.  However, as I said, Kali crashes often and Guac isn&#39;t a simple install, so having a third machine to act as an independent Guac server seemed prudent to avoid re-provisioning Guac itself.  One added benefit to this solution that I could see was that it&#39;d allow me to later enroll family members&#39; remote machines with a VPN for troubleshooting through the Guac server.&lt;/p&gt;
&lt;p&gt;To build Guac, you&#39;ll install two primary parts: the server and what Apache calls the &amp;quot;client.&amp;quot;  I find this naming confusing given the traditional notion of a server and a remote client, versus a &amp;quot;web client&amp;quot; as they define here. I&#39;ll refer to them as the backend and web app frontend respectively.  I built Guac-Server/backend from source.  For the web app frontend I simply installed Tomcat9 and inserted the Apache-supplied .war file.&lt;/p&gt;
&lt;p&gt;The only  part of this build that was complex was dealing with x11 on Kali to create automatic start up of TigerVNC.  But I&#39;ll get to that soon enough.  Installing the primary components went along pretty smoothly, though it was a bit complex.&lt;/p&gt;
&lt;h3 id=&quot;no-docker&quot;&gt;No Docker?&lt;/h3&gt;
&lt;p&gt;I also dismissed the option of a Docker install method this time.  I chose to avoid docker for a variety of reasons, some of which &lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble/&quot; class=&quot;primary&quot;&gt;I&#39;ve talked about before&lt;/a&gt; .  In brief, when I create single-purpose servers like this, I usually reject Docker as I tend to think that I can tweak the server&#39;s settings to match the single piece of software I want to use to more tightly integrate the distro and the software.  Moreover, some enterprise-level software tends to run better directly on a machine (I&#39;m thinking of Graylog as an example that suggests not using it&#39;s containerized version for production).  And last, I just find it easier to troubleshoot on a headless server if the software isn&#39;t also behind a container&#39;s isolation where there may or may not be the tools you need, and you may or may not be able to run standard Linux commands.&lt;/p&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;h2 id=&quot;guide-to-installing-apache-guacamole&quot;&gt;Guide to Installing Apache Guacamole&lt;/h2&gt;
&lt;p&gt;All told, I installed or configured software on three separate computers/vms using the command line that included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Ubuntu 24.04 VM headless server for Guac-server backend, the  Guac web frontend, and a database&lt;/li&gt;
&lt;li&gt;A Kali 2025.1c VM running the VNC server  &lt;a href=&quot;https://tigervnc.org/&quot; class=&quot;primary&quot;&gt;TigerVNC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My local machine with a browser&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For brevity in this post, such as it is, I won&#39;t cover creating VMs in proxmox.  I used the instructions &lt;a href=&quot;https://www.kali.org/docs/virtualization/install-proxmox-guest-vm/&quot; class=&quot;primary&quot;&gt;provided by Kali&lt;/a&gt;  to import a Kali prebuilt VM.  There were also a number of sources (some outdated) on the overall process that helped, including &lt;a href=&quot;https://www.linode.com/docs/guides/installing-apache-guacamole-on-ubuntu-and-debian/&quot; class=&quot;primary&quot;&gt;this Akamai post&lt;/a&gt;  and the &lt;a href=&quot;https://guacamole.apache.org/doc/gug/installing-guacamole.html#installing-guacamole-natively&quot; class=&quot;primary&quot;&gt;original documentation&lt;/a&gt; .&lt;/p&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;h3 id=&quot;installing-the-server-backend&quot;&gt;Installing the Server/Backend&lt;/h3&gt;
&lt;p&gt;Shoutout to credit where it&#39;s due: I followed &lt;a href=&quot;https://guacamole.apache.org/doc/gug/installing-guacamole.html&quot;&gt;the official instructions&lt;/a&gt; with help from &lt;a href=&quot;https://medium.com/@anshumaansingh10jan/unlocking-remote-access-a-comprehensive-guide-to-installing-and-configuring-apache-guacamole-on-30a4fd227fcd&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First make sure your system is up to date.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; upgrade &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Guac can connect using VNC, RDP or offer an SSH connection to a terminal shown through the browser.  I opted to install all the associated dependencies for these options, prior to installing, just to cover all eventualities.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; build-essential libcairo2-dev libjpeg-turbo8-dev &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    libpng-dev libtool-bin libossp-uuid-dev libvncserver-dev &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    freerdp2-dev libssh2-1-dev libtelnet-dev libwebsockets-dev &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    libpulse-dev libvorbis-dev libwebp-dev libssl-dev &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    libpango1.0-dev libswscale-dev libavcodec-dev libavutil-dev &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
    libavformat-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The official website is &lt;a href=&quot;https://guacamole.apache.org/releases/&quot;&gt;here&lt;/a&gt; with the latest releases.  Download the release.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://apache.org/dyn/closer.lua/guacamole/1.5.5/source/guacamole-server-1.5.5.tar.gz?action&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;download &lt;span class=&quot;token parameter variable&quot;&gt;-O&lt;/span&gt; guacamole-server-1.5.5.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Decompress the release.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-xvf&lt;/span&gt; guacamole-server-1.5.5.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next you&#39;ll begin the build process.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; guacamole-server-1.5.5/&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; ./configure --with-init-dir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/etc/init.d --enable-allow-freerdp-snapshots&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that you&#39;ve installed, stay in that directory for a moment longer.  Create links and cache to the shared libraries of the Guac folder.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; ldconfig&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then ensure the Service File is loaded, enabled, and started.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl daemon-reload &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; guacd &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl start guacd &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl status guacd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In future steps you&#39;re going to need some directories, so make them now.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; /etc/guacamole/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;extensions,lib&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;h3 id=&quot;installing-the-webapp-frontend&quot;&gt;Installing the Webapp/Frontend&lt;/h3&gt;
&lt;p&gt;At the time of this writing, Tomcat10, the default available in Ubuntu 24.04, wouldn&#39;t work with Gucamole.  To get Tomcat9 on Ubuntu 24.04, add the repo.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; add-apt-repository &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;deb http://archive.ubuntu.com/ubuntu/ jammy main universe&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then install Tomcat9.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; tomcat9 tomcat9-admin tomcat9-common tomcat9-user &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now download the .war file from the Apache website.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://apache.org/dyn/closer.lua/guacamole/1.5.5/binary/guacamole-1.5.5.war?action&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;download &lt;span class=&quot;token parameter variable&quot;&gt;-O&lt;/span&gt; guacamole-1.5.5.war&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Move the war file to the directory we created.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; guacamole-1.5.5.war /var/lib/tomcat9/webapps/guacamole.war&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart Tomcat9.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl restart tomcat9 guacd&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;h3 id=&quot;database-for-authentication&quot;&gt;Database for Authentication&lt;/h3&gt;
&lt;p&gt;While the Guac docs say the web UI is functional at this point, I wasn&#39;t able to login with the default credentials without a database connected up to Guac.  I decided to use MariaDB because it&#39;s a drop in for MySQL and easily provisioned on Debian derivatives.&lt;/p&gt;
&lt;p&gt;Install MariaDB.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; mariadb-server &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Secure the install.  Make sure to create a root password.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; mysql_secure_installation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before you move on to database creation, you&#39;ll need some additions for MariaDB.  You&#39;ll need a connector provided by MySQL and a Apache-supplied driver to connect MariaDB to the Guacamole web app.&lt;/p&gt;
&lt;p&gt;First download the connector from &lt;a href=&quot;https://dev.mysql.com/downloads/connector/j/&quot;&gt;this page&lt;/a&gt; (select platform &lt;em&gt;independent&lt;/em&gt; to find the tar file).&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-j-9.3.0.tar.gz &lt;span class=&quot;token parameter variable&quot;&gt;-O&lt;/span&gt; mysql-connector-j-9.3.0.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then extract the tar file and copy it to the Guac lib config.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-xvf&lt;/span&gt; mysql-connector-j-9.3.0.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; mysql-connector-java-9.3.0/mysql-connector-j-9.3.0.jar /etc/guacamole/lib/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can get the JDBC auth driver from the Guac &lt;a href=&quot;https://guacamole.apache.org/releases/&quot;&gt;releases page&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://apache.org/dyn/closer.lua/guacamole/1.5.5/binary/guacamole-auth-jdbc-1.5.5.tar.gz?action&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;download &lt;span class=&quot;token parameter variable&quot;&gt;-O&lt;/span&gt; guacamole-auth-jdbc-1.5.5.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then extract the tar file and copy it to the Guac extensions directory you created.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-xvf&lt;/span&gt; guacamole-auth-jdbc-1.5.5.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; guacamole-auth-jdbc-1.5.5/mysql/guacamole-auth-jdbc-mysql-1.5.5.jar /etc/guacamole/extensions/&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;create-the-guac-database-in-mariadb&quot;&gt;Create the Guac Database in MariaDB&lt;/h4&gt;
&lt;p&gt;Now we&#39;ll create a database for Guac with SQL syntax commands.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;mysql &lt;span class=&quot;token parameter variable&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a database.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;CREATE DATABASE guacamole_db&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a new user with their password.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;CREATE &lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;SOME_USER&gt;&#39;&lt;/span&gt;@&lt;span class=&quot;token string&quot;&gt;&#39;localhost&#39;&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;SOME_PASSWORD&gt;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grant our new user privileges to the new database.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;GRANT SELECT,INSERT,UPDATE,DELETE ON guacamole_db.* TO &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;SOME_USER&gt;&#39;&lt;/span&gt;@&lt;span class=&quot;token string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Refresh to update app with the new privileges.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;FLUSH PRIVILEGES&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Exit.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;quit&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;import-schema-files&quot;&gt;Import Schema Files&lt;/h4&gt;
&lt;p&gt;Next add a schema to the database you created. Adding this schema file will fill out the tables in your new database with a format that Guac can use.&lt;/p&gt;
&lt;p&gt;Change directories to the schema from the JDBC driver you downloaded earlier.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; guacamole-auth-jdbc-1.5.5/mysql/schema&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensure you use the root user in the &lt;code&gt;mysql&lt;/code&gt; portion of the following command to import the schema into the Guac database.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; *.sql &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; mysql &lt;span class=&quot;token parameter variable&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; guacamole_db&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the properties file for connections between MariaDB and Guac.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; /etc/guacamole/guacamole.properties&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy the following into the file.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# MySQL properties&lt;/span&gt;
mysql-hostname: &lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;.0.1
mysql-port: &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;
mysql-database: guacamole_db
mysql-username: &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SOME_USER&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
mysql-password: &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SOME PASSWORD&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload everything.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl restart tomcat9 guacd mysql&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The web UI should already be up but now it can accept your credentials.  Check the website at &lt;code&gt;http://&amp;lt;HOST_IP&amp;gt;:8080/guacamole&lt;/code&gt; and login with &lt;code&gt;guacadmin:guacadmin&lt;/code&gt;.&lt;/p&gt;
&lt;section&gt;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;p&gt;Once you sign in, you&#39;ll face a screen like the following.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;img loading=&quot;lazy&quot; src=&quot;https://christopherbauer.xyz/img/2025-05-01_13-57.png&quot; alt=&quot;Guac mainscreen&quot; &quot;=&quot;&quot;&gt;&lt;p&gt;&lt;cite&gt;&lt;small&gt;Guac mainscreen&lt;/small&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section&gt;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;p&gt;Head to the upper right corner where there is a drop down for guacadmin and select settings. To change the guacadmin password, create a user, or delete users select the user tab.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;img loading=&quot;lazy&quot; src=&quot;https://christopherbauer.xyz/img/2025-05-01_13-57_1.png&quot; alt=&quot;Users tab&quot; &quot;=&quot;&quot;&gt;&lt;p&gt;&lt;cite&gt;&lt;small&gt;Users tab&lt;/small&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section&gt;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;p&gt;Make a new user with all the permissions boxes ticked, sign out and then back in as the new user, and finally delete the guacadmin user (or at minimum change the gaucadmin password).&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;img loading=&quot;lazy&quot; src=&quot;https://christopherbauer.xyz/img/2025-05-01_13-58.png&quot; alt=&quot;User creation&quot; &quot;=&quot;&quot;&gt;&lt;p&gt;&lt;cite&gt;&lt;small&gt;User creation&lt;/small&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;h3 id=&quot;installing-tigervnc-on-kali&quot;&gt;Installing TigerVNC on Kali&lt;/h3&gt;
&lt;p&gt;Next, you&#39;ll install a VNC server called TigerVNC on Kali  which will connect to the Guac server and subsequently relay to your browser.  I used instructions inspired by &amp;quot;We are going to use TigerVNC:&amp;quot; at &lt;a href=&quot;https://www.kali.org/docs/general-use/guacamole-kali-in-browser/&quot;&gt;this page&lt;/a&gt; to create this section and &lt;a href=&quot;https://gist.github.com/mixalbl4-127/4f5ab6744be6f98555f3e29f1cfc7050&quot; class=&quot;primary&quot;&gt;this GitHub gist.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the Kali machine update Kali and get yourself a hot drink, it&#39;ll be a minute.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt&lt;/span&gt; upgrade &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install -y tigervnc-standalone-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make a directory in your home called .vnc.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; ~/.vnc/ &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; ~/.vnc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Place a file in it called &lt;code&gt;xstartup&lt;/code&gt; with the following content.  This will configure the vnc server.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
startxfce4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It used to be that the last line of the file above ended in &lt;code&gt;&amp;amp;&lt;/code&gt; to background the startx command.  This no longer seems as though it is needed since Ubuntu 22.04.&lt;/p&gt;
&lt;p&gt;Make sure that file is executable.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x ~/.vnc/xstartup&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the following and pay attention to the output.  Initiating TigerVNC manually in this way will ask you for a password.  Keep that password handy, you&#39;ll need it later for the Guac web UI.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;vncserver&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;ll say something like &lt;code&gt;New Xtigervnc server &#39;&amp;lt;SOME_HOSTNAME&amp;gt;:2 (&amp;lt;SOME_USER&amp;gt;)&#39; on port 5902 for display :2.&lt;/code&gt;  Take note of the &lt;code&gt;:2&lt;/code&gt; portion and port.&lt;/p&gt;
&lt;p&gt;Note, if you have trouble with the command above, try setting the XDG_CONFIG_HOME environment variable to &lt;code&gt;/home/&amp;lt;YOUR_USERNAME&amp;gt;/.vnc&lt;/code&gt; in your &lt;code&gt;.bashrc&lt;/code&gt; (or whatever shell you run) file and run &lt;code&gt;source ~/.bashrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point you have two options.  If you just want to get TigerVNC up and running to make sure everything works, then run it manually.  First kill the server from above with &lt;code&gt;vncserver -kill :*&lt;/code&gt;.  Then enter the following with the parameter to expose the port externally.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vncserver :2 -localhost no
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you can skip ahead to the Guac connections section.&lt;/p&gt;
&lt;p&gt;If you&#39;d rather ensure that TigerVNC runs each time Kali boots, read on.&lt;/p&gt;
&lt;h4 id=&quot;ensuring-tigervnc-starts-at-boot&quot;&gt;Ensuring TigerVNC Starts at Boot&lt;/h4&gt;
&lt;p&gt;Next, we&#39;ll set up a Service File to start TigerVNC at startup.  Of course you can skip this step if you only plan to occasionally use Guac to connect to Kali, as you can manually start the TigerVNC server over SSH first and then connect through Guac.&lt;/p&gt;
&lt;p&gt;For this step, I relied on &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-16-04&quot;&gt;this Digital Ocean guide&lt;/a&gt;, specifically step 4.&lt;/p&gt;
&lt;p&gt;Create a  Service File at the following location and with the following name &lt;code&gt;/etc/systemd/system/vncserver@.service&lt;/code&gt;.  Populate that file with the following, and be sure to change &amp;quot;someuser&amp;quot; with your username.  Also on the line &lt;code&gt;ExecStart&lt;/code&gt; modify the geometry varaible for your screen resolution.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=Start TigerVNC server at startup
After=syslog.target network.target

[Service]
Type=simple
User=someuser
Group=someuser
WorkingDirectory=/home/someuser

PIDFile=/home/someuser/.vnc/%H:590%i.pid
ExecStartPre=-/bin/sh -c &amp;quot;/usr/bin/vncserver -kill :%i &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&amp;quot;
ExecStart=/usr/bin/vncserver -fg -depth 24 -geometry 1920x1080 -localhost no :%i
ExecStop=/usr/bin/vncserver -kill :%i

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload the Service Files.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you&#39;ll start the service.  You have to add the number you noted from running the &lt;code&gt;vncserver&lt;/code&gt; command to the following standard systemctl commands in order to tell the Service File what display number the service should appear over.  Start it using the number from the &lt;code&gt;vncserver&lt;/code&gt; command above, e.g.:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; vncserver@2.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure any other VNC servers aren&#39;t operating.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;vncserver &lt;span class=&quot;token parameter variable&quot;&gt;-kill&lt;/span&gt; :*&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then start it.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl start vncserver@2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you need a refresher, you can run the following to identify and ensure the port is external facing and open.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ss -tulpn | grep -E -i &#39;vnc|590&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take note of the port, as you&#39;ll need it for the Guac web UI.&lt;/p&gt;
&lt;p&gt;Finally, verify the service is running properly.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl status vncserver@2&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;troubleshooting-service-file-creation&quot;&gt;Troubleshooting Service File Creation&lt;/h4&gt;
&lt;p&gt;I struggled a bit with this section, in part because I ran the &lt;code&gt;vncserver&lt;/code&gt; command with sudo at one point prior to setting up the Service File.  That caused a great deal of confusion as the server attempted repeated to find TigerVNC configs in the root directory.&lt;/p&gt;
&lt;p&gt;To remedy, I moved the ~/.vnc, ~/.Xauthority, ~/.Xresources and/or ~/.config/tigervnc files and directories to a backup location (or give them a &lt;code&gt;.bak&lt;/code&gt; extension).  Then I uninstalled &lt;code&gt;tigervnc-standalone-server&lt;/code&gt; and reinstalled.  Finally, I started over from the &lt;a href=&quot;https://christopherbauer.org/blog/guac-proxmox-kali/#installing-tigervnc-on-kali&quot; class=&quot;primary&quot;&gt;section above.&lt;/a&gt;&lt;/p&gt;
&lt;br&gt; 
&lt;br&gt;
&lt;h3 id=&quot;creating-a-connection-in-guac&quot;&gt;Creating a Connection in Guac&lt;/h3&gt;
&lt;p&gt;For this section credit is due to &lt;a href=&quot;https://www.kali.org/docs/general-use/guacamole-kali-in-browser/&quot; class=&quot;primary&quot;&gt;the official Kali docs on Guac.&lt;/a&gt;&lt;/p&gt;
&lt;section&gt;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;p&gt;To create a connection to Kali, sign into Guac at the address you used above.   Head to the settings in the dropdown at the upper right, and look for the connections tab.  Clicking on that tab will open a new pane with fields for the connection details.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;img loading=&quot;lazy&quot; src=&quot;https://christopherbauer.xyz/img/2025-05-03_10-52.png&quot; alt=&quot;Connections tab&quot; &quot;=&quot;&quot;&gt;&lt;p&gt;&lt;cite&gt;&lt;small&gt;Connections tab&lt;/small&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section&gt;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;p&gt;The most important section is labeled PARAMETERS.  Look for the Network sub-section.  Enter your Kali IP or hostname and the port you noted from above in that section.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;img loading=&quot;lazy&quot; src=&quot;https://christopherbauer.xyz/img/2025-05-03_10-55.png&quot; alt=&quot;Connections editing pane&quot; &quot;=&quot;&quot;&gt;&lt;p&gt;&lt;cite&gt;&lt;small&gt;Connections editing pane&lt;/small&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;section&gt;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;p&gt;Then for the Authentication sub-section, enter the user in Kali that started the VNC server and the password you created.  Finally, under the Display sub-section go to the line for Color depth and select True color (32-bit).&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;img loading=&quot;lazy&quot; src=&quot;https://christopherbauer.xyz/img/2025-05-03_10-44.png&quot; alt=&quot;Connections editing pane&quot; &quot;=&quot;&quot;&gt;&lt;p&gt;&lt;cite&gt;&lt;small&gt;Connections editing pane&lt;/small&gt;&lt;/cite&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
&lt;p&gt;With that, you should be able to connect.  Head back up to the hamburger in the top right and select &amp;quot;Home&amp;quot; from the drop down.  Now you should see a new clickable entry with your title for Kali.  Simply click and you should begin the connection process.  With any luck that will successfully connect and you&#39;re in business!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Installing Guacamole is a bit of an investment in your time, especially when you consider that Proxmox&#39;s SPICE option might work well for you.  For my circumstances however, it was worth it to build and write up this guide if only to build some familiarity with Guacamole.&lt;/p&gt;
&lt;p&gt;If you&#39;d like to connect, feel free to reach out on &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon&lt;/a&gt; .&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Brief Thoughts on the 2025 Sophos Report</title>
    <link href="https://christopherbauer.xyz/blog/sophos-2025/" />
    <updated>2025-04-09T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/sophos-2025/</id>
    <content type="html">&lt;p&gt;This is reprint of my mastodon post of 4/7/25.&lt;/p&gt;
&lt;p&gt;Okay, a couple of folks I follow have written about the 2025 Sophos Active Adversary Report but I want to underscore their thoughts and draw attention to few other items.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regarding the &amp;quot;lede&amp;quot; about median dwell times falling to two days: its difficult to assess, when Sophos only offers a single simple statistical measure, the significance of that figure Simple statistics should always be reported together to give the reader a more accurate sense of were the median falls in the distribution.  With the median alone, I can&#39;t tell if its tightly coupled with the average or whether odd outliers were skewing things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Others have commented, with good reason, on the prevalence of uncomplicated root causes such as credential compromise and exploits.  Sophos repeatedly and rightly bangs the MFA drum as well.  The majority of these cases seem like bread and butter stuff for blue teams.  That is not to pass blame but suggest that there&#39;s plenty to do before we get to super hackers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaking of MFA, 64% of victims did not have MFA configured in 2024.  This is the first shocking statistic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;logs were missing in 47% of cases&amp;quot; This is the second.  That figure is really striking to me, though the breakdown is not all down to attackers deleting their trails.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;business processes and change management vs security: I feel as though I hear quite a lot about how security is a cost center.  I think this report comes squarely down on the side of &amp;quot;if there isn&#39;t adequate security, there won&#39;t a business process to carry out.&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all an interesting report.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.sophos.com/en-us/2025/04/02/2025-sophos-active-adversary-report&quot; class=&quot;primary&quot;&gt;Here is the link&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Lessons Learned on Ansible Vault</title>
    <link href="https://christopherbauer.xyz/blog/ansible-prelim-lessons/" />
    <updated>2025-04-04T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/ansible-prelim-lessons/</id>
    <content type="html">&lt;p&gt;Ansible has fair documentation. Many of the docs however focus narrowly on a given command and its functions. While this can be useful to a seasoned user, some, such as &lt;a href=&quot;https://docs.ansible.com/ansible/latest/vault_guide/index.html&quot; class=&quot;primary&quot;&gt;Ansible&#39;s Vault docs&lt;/a&gt;  don&#39;t provide the larger context on how a &lt;code&gt;ansible-vault&lt;/code&gt; encrypted sudo password is incorporated and deployed in a playbook in conjunction with the Ansible vault password. In this post I&#39;m offering a quick write up of my understanding of this context from early in my study of Ansible.&lt;/p&gt;
&lt;h2 id=&quot;when-sudo-requires-a-password&quot;&gt;When Sudo Requires a Password&lt;/h2&gt;
&lt;p&gt;One of the trickiest parts of getting started with Ansible has been figuring out how Ansible handles a remote host&#39;s password prompts for activities requiring sudo privileges. To remedy this, I created an &lt;code&gt;ansible-vault&lt;/code&gt; file with the sudo password.&lt;/p&gt;
&lt;p&gt;The steps weren&#39;t complicated, but how they all fit together was unclear. First, I created a file that would store my password, encrypted, with the dedicated Ansible command.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;ansible-vault create &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SOME_FILE.yaml&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the command runs it prompted me to create an Ansible vault password for use in decrypting the file. I saved that Ansible Vault password somewhere safe.&lt;/p&gt;
&lt;p&gt;To take advantage of that stored password (i.e. when the remote host prompts during Ansible&#39;s run) I next had to specify the path to that password file in my playbook.&lt;/p&gt;
&lt;p&gt;Say, for example, I wanted to ensure the correct timezone was set on a remote host. I might create the following task in some playbook.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Set timezone to Los_Angeles
 &lt;span class=&quot;token key atrule&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;token key atrule&quot;&gt;community.general.timezone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; America/Los_Angeles&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;become: true&lt;/code&gt; ensures that the task will seek elevated privileges to carry out the timezone change, but it won&#39;t have the password for sudo on the remote host. To give Ansible the sudo password, I included the following after &lt;code&gt;become:true&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt; 
 &lt;span class=&quot;token key atrule&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;ansible_become_password&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;{{ lookup(&#39;ansible.builtin.file&#39;, &#39;/PATH/TO/SECRET/PASSWORD/FILE.yml&#39;) }}&quot;&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That &lt;code&gt;ansible_become_password&lt;/code&gt; variable ensured Ansible sought out the password file I created to complete the sudo password prompt.&lt;/p&gt;
&lt;p&gt;Now I was ready to run the playbook.  The last piece involved making sure I added &lt;code&gt;--ask-vault-pass&lt;/code&gt; as a parameter to the &lt;code&gt;ansible-playbook&lt;/code&gt; command.  That ensured that Ansible would prompt me for the Vault password needed decrypt the file containing the sudo password and use the sudo password in setting the time.&lt;/p&gt;
&lt;p&gt;Simple right?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Caddy Reverse Proxy with TLS and Cloudflare DNS Challenge - A Caddyfile Example</title>
    <link href="https://christopherbauer.xyz/blog/caddy-rev-proxy/" />
    <updated>2025-03-27T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/caddy-rev-proxy/</id>
    <content type="html">&lt;p&gt;Installing and configuring a &lt;a href=&quot;https://caddyserver.com/&quot; class=&quot;primary&quot;&gt;Caddy&lt;/a&gt;  webserver from a binary with a Caddyfile for a reverse-proxy was a little more involved than I expected. This post clarifies a single stage of this process by illustrating how to configure a Caddyfile with an example for a reverse-proxy and TLS. This post won&#39;t cover building a Proxmox LXC container, obtaining an User API key from Cloudflare, or installing the Caddy custom binary.&lt;/p&gt;
&lt;h2 id=&quot;overview-in-brief&quot;&gt;Overview in Brief&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/caddy-rev-proxy/#downloading-and-configuring-caddy&quot; class=&quot;primary&quot;&gt;Downloading Caddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/caddy-rev-proxy/#creating-the-caddyfile&quot; class=&quot;primary&quot;&gt;Creating the Caddyfile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hostname-provisioning-is-homeprod&quot;&gt;Hostname Provisioning is Homeprod&lt;/h2&gt;
&lt;p&gt;I&#39;ve recently discovered how critical a reverse proxy is when using domain names and TLS. I&#39;ve been homelabbing for a few years now, but I&#39;ve only recently moved to making production-level services available to extended family. As any good &lt;a href=&quot;https://awfulwoman.com/notes/2024/11/homeprod-not-homelab/&quot; class=&quot;primary&quot;&gt;homeprodder&lt;/a&gt;  knows, that means hostnames instead of IPs and TLS. So far so good, just set up &lt;a href=&quot;https://nginxproxymanager.com/&quot; class=&quot;primary&quot;&gt;Nginx-Reverse-Proxy&lt;/a&gt;  with Cloudflare DNS challenge and you&#39;re good to go, right? Well, my version of Nginx-Reverse-Proxy lived on a server I didn&#39;t keep powered on at production-level five nines. As the number of services I&#39;m hosting has multiplied, and the number of users has also grown, I found myself in a situation where the sudden disappearance of a hostname immediately causes a lot of problems.&lt;/p&gt;
&lt;p&gt;If the hostname disappears, its as though the service has disappeared, and that is true not only for people unable to reach those services but also for automation. Any sort of monitoring solution will go a bit nuts if not made aware hostnames suddenly dropping off the radar, even if the underlying service is still responsive. Cron starts clogging up logs. Not to mention that I can no longer remember off-hand what the IP of a service is when there are dozens operating. That means manual troubleshooting when hostnames go missing is harder than it once was as well. Needless to say, it quickly became evident that offering hostnames by way of a reverse proxy needed to become a full time operation.&lt;/p&gt;
&lt;p&gt;Looking into the alternatives, I learned some things. First, I didn&#39;t realize that Nginx-Reverse-Proxy isn&#39;t maintained by the official Nginx team but rather by an individual (the GUI is so polished I just assumed it was an official product). That doesn&#39;t concern me greatly, but it may explain the next thing I learned. Second, Nginx-Reverse-Proxy is only offered as a Docker container. That posed a problem. Shifting a reverse proxy to the always-on Intel n100 minipc would mean spinning up a new VM just to host Docker for Nginx-Reverse-Proxy. That seemed like unacceptable overhead to me. Sure, I&#39;ve heard of folks running Docker in Proxmox LXCs, but the Proxmox team &lt;a href=&quot;https://pve.proxmox.com/wiki/Linux_Container&quot; class=&quot;primary&quot;&gt;don&#39;t recommend it&lt;/a&gt;  and my Proxmox host is janky enough as is. With that in mind, I created a LXC with a reverse proxy using a Caddy binary.&lt;/p&gt;
&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;
&lt;p&gt;This guide will assume the reader is familiar with the linux command line, has a domain registered, and has generated a User API Token in Cloudflare to access Cloudflare&#39;s DNS management capabilities.&lt;/p&gt;
&lt;h2 id=&quot;downloading-caddy&quot;&gt;Downloading Caddy&lt;/h2&gt;
&lt;p&gt;To use Caddy with the Cloudflare DNS you have to &lt;a href=&quot;https://caddyserver.com/download&quot; class=&quot;primary&quot;&gt;download a custom Caddy binary&lt;/a&gt;  that builds in the dns.providers.cloudflare plugin to the finished product. Once you&#39;ve downloaded the binary, you can use &lt;a href=&quot;https://caddyserver.com/docs/running#manual-installation&quot; class=&quot;primary&quot;&gt;this docs page&lt;/a&gt;  for instructions on how to proceed.&lt;/p&gt;
&lt;p&gt;To quickly recap my steps, I placed the downloaded binary in my path and added a group and user with parameters tailored to Caddy. I made sure the binary in &lt;code&gt;/usr/bin/&lt;/code&gt; was executable by world. Next I &lt;a href=&quot;https://github.com/caddyserver/dist/blob/master/init/caddy.service&quot; class=&quot;primary&quot;&gt;created a systemd unit file&lt;/a&gt; . According to &lt;a href=&quot;https://caddyserver.com/docs/running#manual-installation&quot; class=&quot;primary&quot;&gt;the docs&lt;/a&gt; , I selected the systemd caddy.service (non-api) unit file type, went to its github page, and manually entered that code into a file:&lt;code&gt;/etc/systemd/system/caddy.service&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;creating-the-caddyfile&quot;&gt;Creating the Caddyfile&lt;/h2&gt;
&lt;p&gt;I then created a Caddyfile at &lt;code&gt;/etc/caddy/Caddyfile&lt;/code&gt;, with the following initial wildcard certificate DNS request to Cloudflare based on &lt;a href=&quot;https://caddyserver.com/docs/caddyfile/patterns#wildcard-certificates&quot;&gt;this format&lt;/a&gt;.  Below I offer an example of what this Caddyfile can look like.  The example sets up the DNS challenge for TLS and then creates proxies for hypothetical Plex and Nextcloud instances. Readers can add or modify according to their needs.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;*.example.com &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        tls &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                dns cloudflare &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SOME_CLOUDFLARE_API_KEY&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        @plex &lt;span class=&quot;token function&quot;&gt;host&lt;/span&gt; plex.example.com
        handle @plex &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                reverse_proxy &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;PLEX_IP:PORT&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        @nextcloud &lt;span class=&quot;token function&quot;&gt;host&lt;/span&gt; nc.example.com
        handle @nextcloud &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                reverse_proxy &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NEXTCLOUD_IP:PORT&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        log &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                output &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; /var/log/caddy/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SOME_FILENAME&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;.log
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whenever you update that file, be sure to reload Caddy using &lt;code&gt;systemctl reload caddy&lt;/code&gt; rather than Caddy&#39;s command line commands.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I spent a few more minutes than I would have liked trying to sort out the Caddyfile&#39;s particulars. They weren&#39;t hard to get right, but the documentation wasn&#39;t immediately clear either. Hope this saves you a few minutes somewhere down the line.&lt;/p&gt;
&lt;p&gt;Should you want to connect, feel free reach out on &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon&lt;/a&gt; .&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I&#39;m an Irked Docker Maintainer and Homeprodder</title>
    <link href="https://christopherbauer.xyz/blog/docker-trouble/" />
    <updated>2025-03-26T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/docker-trouble/</id>
    <content type="html">&lt;p&gt;Pointing folks to tools for more insight into Docker containers.&lt;/p&gt;
&lt;h2 id=&quot;overview-in-brief&quot;&gt;Overview in Brief&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble/#context-homelab-and-homeprod&quot; class=&quot;primary&quot;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble/#gelf-for-graylog-servers&quot; class=&quot;primary&quot;&gt;GELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble/#oxker-for-on-demand-log-viewing&quot; class=&quot;primary&quot;&gt;Oxker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble//#lazyjournal-for-on-demand-log-viewing&quot; class=&quot;primary&quot;&gt;Lazyjournal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;context-homelab-and-homeprod&quot;&gt;Context: Homelab and Homeprod&lt;/h2&gt;
&lt;p&gt;I&#39;ve reached a milestone in the maturity of my homelab where a certain number of services are so integral to my family&#39;s routines as to be indispensable.  Perhaps this reflects maturation from &amp;quot;lab&amp;quot; to &amp;quot;production&amp;quot; that many enthusiasts before me have gone through, but the amount of administrative attention required has had me reconsidering the design of those services in the &lt;em&gt;prod&lt;/em&gt; category.&lt;/p&gt;
&lt;p&gt;Concomitantly, my patience for inscrutable containers or processes that are difficult to manage by hand (looking at you API-only distros like Talos), is very low these days.  Point in case: I recently spun up a K8s cluster and I couldn&#39;t help but admire how cool it is to abstract away the process of making a container multi-node by way of API-orchestration-land.  My awe quickly melted away in the face of complexity and was accompanied by a sense that this technical marvel is not immune &lt;a href=&quot;https://www.wiz.io/blog/ingress-nginx-kubernetes-vulnerabilities&quot; class=&quot;primary&quot;&gt;to the same sorts vulnerabilities&lt;/a&gt;  as any other. Given K8s&#39; complexity, it was probably inevitable that I&#39;d come back around to Docker compose files as the primary source of my bedrock services.&lt;/p&gt;
&lt;p&gt;That said, Docker containers aren&#39;t great.  They&#39;re nice in terms of installing and configuring  services (depending on the documentation), but they are a pain to troubleshoot.  So going deep on Docker has been rocky, and I wanted to share a few insights for looking at logs and general Docker tinkering.&lt;/p&gt;
&lt;h2 id=&quot;quick-and-dirty-troubleshooting-of-docker-containers&quot;&gt;Quick and Dirty Troubleshooting of Docker Containers&lt;/h2&gt;
&lt;p&gt;Of course you can always &lt;code&gt;docker exec -it &amp;lt;SOME_CONTAINER_NAME&amp;gt; sh&lt;/code&gt; or &lt;code&gt;docker logs &amp;lt;SOME_CONTAINER_NAME&amp;gt;&lt;/code&gt; if you need to troubleshoot a service.&lt;/p&gt;
&lt;p&gt;I don&#39;t find these methods terribly adroit in headless ecosystems.  Moreover, looking at raw log entries in single space on the CLI is, for me, a fast road to missing critical information.  I do that enough when hacking, I don&#39;t want more of it at home.  I&#39;d like to have some colorized, formatted output please.&lt;/p&gt;
&lt;h2 id=&quot;gelf-for-graylog-servers&quot;&gt;GELF for Graylog Servers&lt;/h2&gt;
&lt;p&gt;In &amp;quot;today-I-learned&amp;quot; news, Docker has native support for the &lt;a href=&quot;https://docs.docker.com/engine/logging/drivers/gelf/&quot; class=&quot;primary&quot;&gt;Graylog Extended Formate (GELF)&lt;/a&gt;  logging format.  If you run Graylog, you can easily ingest Docker logs with the simple addition of a few lines to docker-compose files.  Since compose files are in that ever readable &lt;em&gt;yaml&lt;/em&gt; format, this amounts to little more than adding the following block, say after the &amp;quot;restart: always&amp;quot; line.  Yaml is sensitive to spacing, so make sure the &amp;quot;logging&amp;quot; text lines up with the previous entry&#39;s indentation.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gelf&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;gelf-address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;udp://&amp;lt;YOUR_LOGGING_SERVER_IP:PORT&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;SOME_TAG&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;oxker-for-on-demand-log-viewing&quot;&gt;Oxker for On-Demand Log Viewing&lt;/h2&gt;
&lt;p&gt;As an alternative, I ran across &lt;a href=&quot;https://github.com/mrjackwills/oxker&quot; class=&quot;primary&quot;&gt;Oxker&lt;/a&gt; , a &amp;quot;simple TUI to view and control docker containers.&amp;quot;  Oxker is run itself as a docker container.  If you are at all familiar with &lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot; class=&quot;primary&quot;&gt;LazyGit&lt;/a&gt;  then Oxker&#39;s TUI interface will be intuitive.  Oxker shares a lot in common with the more widely known tool, &lt;a href=&quot;https://github.com/jesseduffield/lazydocker&quot; class=&quot;primary&quot;&gt;LazyDocker&lt;/a&gt;  but in my tests LazyDocker was both ineffective in exposing logs on my machine and offered superfluous information (to me) regarding volumes and images.  Perhaps the former issue was an omitted parameter on my part, but since a log-first tool was what I was after as a matter of priority, I wasn&#39;t prepared to tinker and moved on quickly to Oxker.  It&#39;s a straightforward tool offering logs and some controls over containers.  The logs themselves are still single space and not colorized, but it is nice to see the layout orchestrated with cpu and memory stats this way.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2025-03-26_12-30.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I favor running Oxker on the docker command line rather than as a compose file as I tend to use it ad-hoc rather than as a perpetual service and I don&#39;t store any data or configurations long-term.  The last parameter is if you&#39;d like to have the log entries appear with the local timestamp instead of GMT.&lt;/p&gt;
&lt;pre class=&quot;language-cli&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cli&quot;&gt;docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock:ro --pull=always mrjackwills/oxker --timezone &lt;YOUR_TIMEZONE&gt;&lt;/YOUR_TIMEZONE&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;lazyjournal-for-on-demand-log-viewing&quot;&gt;Lazyjournal for On-Demand Log Viewing&lt;/h2&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2025-03-26_13-54.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
I saved the one with the most potential to fill my toolkit for last. &lt;a href=&quot;https://github.com/Lifailon/lazyjournal&quot; class=&quot;primary&quot;&gt;Lazyjournal&lt;/a&gt;  is well-known but new to me. Like Oxker it offers a Lazygit-style readout. This is a viewing TUI-based tool, it doesn&#39;t manipulate containers or give you system stats like Oxker above. While it is primarily pointed at journalctl entries, it also works with containers. The maintainers favor a download method of using a go binary with links to your path for Linux instances. I find Lazyjournal&#39;s interface a bit busy, especially when I&#39;m only after containers and have to shift through journalctl entries and syslog stuff.  However, I really like the formatted and colorized logs it offers and the filter is fast and a nice alternative to grepping through journalctl entries.
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well, I&#39;ve been using Oxker a lot lately, I think because of ease of getting to the logs.  As I said above, I am starting to use Lazyjournal a bit more, as I like how it aids in sifting through what can be a container&#39;s idiosyncratic log report information (its like you have to learn a new tech stack with each new container).  I hope this quick survey of tools to reveal Docker logs has been useful.  Should you want to connect, feel free reach out on &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon&lt;/a&gt; .&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Migrating Posts from Jekyll to 11ty with Python</title>
    <link href="https://christopherbauer.xyz/blog/migrating_jekyll/" />
    <updated>2025-02-12T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/migrating_jekyll/</id>
    <content type="html">&lt;h4 id=&quot;overview-in-brief&quot;&gt;Overview in Brief&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#rationale-for-switching&quot; class=&quot;primary&quot;&gt;Rationale for Switching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#migrating-jekyll-posts&quot; class=&quot;primary&quot;&gt;Migrating Jekyll Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#removing-the-layout-property&quot; class=&quot;primary&quot;&gt;Removing the Layout Property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#rewriting-image-links&quot; class=&quot;primary&quot;&gt;Rewriting Image Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#rewriting-self-referring-links&quot; class=&quot;primary&quot;&gt;Rewriting Self-Referring Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rationale-for-switching&quot;&gt;Rationale for Switching&lt;/h3&gt;
&lt;p&gt;I recently recreated my website using 11ty and ran into a few challenges transitioning my posts from Jekyll. Before I dig into how I solved them, allow me to recap my reasons for switching.&lt;/p&gt;
&lt;p&gt;I&#39;d used Jekyll since 2020 and while there was a learning curve, Jekyll treated me well for the most part. My realization that I needed to make a change came when I recently upgraded my home machine. I had to install backports on Debian to obtain a load of outdated software and dependencies to just to recreate the simple local Jekyll build flow. That the primary task of a static site generator required so much that wasn&#39;t well maintained anymore was a sign that was hard to miss.&lt;/p&gt;
&lt;p&gt;There were other ongoing issues as well. I never got ruby. I&#39;m not throwing shade, I just never ran into ruby all that much outside of Jekyll. Then, when I started experimenting with 11ty, it&#39;s static site generator used npm with which I am a bit more familiar.  At that point I was sold and ready to make my first steps toward migration.&lt;/p&gt;
&lt;h3 id=&quot;migrating-jekyll-posts&quot;&gt;Migrating Jekyll Posts&lt;/h3&gt;
&lt;p&gt;One challenge with the migration was the layout property in the frontmatter of my Jekyll formatted posts. My new 11ty theme didn&#39;t require a layout property and the engine was utterly confused by it at build, so it had to come out. I didn&#39;t want to do that manually for two dozen back-posts.&lt;/p&gt;
&lt;p&gt;The second challenge seemed more formidable but turned out to be a regex problem. I&#39;d been using a markdown links style of referencing local image locations. For example: &lt;code&gt;![Alt text](URL or file path)&lt;/code&gt;. My new 11ty theme used a Nunjucks shortcode style (e.g. in squiggly brackets something like: % &amp;quot;image caption&amp;quot;, &amp;quot;image link&amp;quot; %). Jekyll did offer the ability to use shortcodes in Liquid, though I always found it easier to use the markdown style. So my posts were littered with the markdown syntax. Another issue I didn&#39;t want to deal with manually for my back-posts.&lt;/p&gt;
&lt;p&gt;Then there was the third problem of the format of self-referring links. Links embedded in my markdown text pointing to my own blog had a date format using forward slashes (e.g. year/month/day). The theme I&#39;m using for 11ty paginates the blog posts using dashes (e.g. year-month-day). In other words, all the links on my blog pointing to my own blog posts were broken. So I would have to alter those to ensure the links referred to posts that actually exist by changing the date format while leaving the rest of the link intact.&lt;/p&gt;
&lt;p&gt;Rather than address my two dozen back-posts manually, these issues seemed like python&#39;s bread and butter. I wrote up some python scripts that I&#39;m posting here as a model for others in a similar situation. Bear in mind that I&#39;m self-taught in Python, so if they appear inelegant, or I use inappropriate code, please feel free to offer suggestions by DMing me at my &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon account&lt;/a&gt; . The scripts appear here separately as I assume readers will not uniformly have the same requirements as I do and might wish to select them individually.&lt;/p&gt;
&lt;p&gt;I used these scripts on Debian Linux with Python3.11 and markdown files for the blog posts. I strongly recommend you make copies of the markdown files you intend to run these on before for testing to ensure that they do what you expect.&lt;/p&gt;
&lt;h3 id=&quot;removing-the-layout-property&quot;&gt;Removing the Layout Property&lt;/h3&gt;
&lt;p&gt;First I imported the path module from pathlib in order to point the commands to a properly formatted directory location.&lt;/p&gt;
&lt;p&gt;Then I set the source directory as a variable. I followed that with a glob search to identify the files in the source directory and to set them to a variable called &amp;quot;files.&amp;quot;&lt;/p&gt;
&lt;p&gt;Next, I created a try and except structure to resolve errors gracefully.&lt;/p&gt;
&lt;p&gt;I then started the proper iteration with a for statement to loop over the files variable. For each file in the loop I next instructed python to open the file as &lt;em&gt;read&lt;/em&gt;, and store that text as a variable &amp;quot;lines.&amp;quot;&lt;/p&gt;
&lt;p&gt;Once python had stored the text as lines, I coded another open method, this time as &lt;em&gt;write&lt;/em&gt; for each file in the loop. Next, I created a nested loop to iterate over the stored text in the &amp;quot;lines&amp;quot; variable. The nested loop had a conditional method to remove any line in the stored text that matched the layout frontmatter property and its newline character. If that condition was met the code then wrote this &amp;quot;new&amp;quot; textual arrangement to the stored text in the &amp;quot;lines&amp;quot; variable. And with that I&#39;d erased the frontmatter layout property in two dozen posts.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/bin/python3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Import modules&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Path

&lt;span class=&quot;token comment&quot;&gt;# Set the source directory and find all the files within it.&lt;/span&gt;
src_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home/directory/of/your/blog/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src_dir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;glob&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;## Find the frontmatter category &quot;layout&quot; and delete it.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; search &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; fileread&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      lines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fileread&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readlines&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; filewrite&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; lines&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

          &lt;span class=&quot;token comment&quot;&gt;# strip() is used to remove &#39;&#92;n&#39;&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# present at the end of each line&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strip&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;layout: post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            filewrite&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Oops! Something went wrong.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rewriting-image-links&quot;&gt;Rewriting Image Links&lt;/h3&gt;
&lt;p&gt;To translate the markdown image format to Nunjucks shortcode I used the same search using a glob pattern but made it into a simple function to handle the source directory as a parameter. However to identify and change the text, I deviated and used a regex search/substitute method. The hardest part was fine-tuning the regex to capture the entirety of the markdown link. I learned that the regex substitution can accept regex groups, and that turned out to be pretty handy.&lt;/p&gt;
&lt;p&gt;I started by importing the re module for regex and the Path module.&lt;/p&gt;
&lt;p&gt;Like above, I set the working directory to a variable.&lt;/p&gt;
&lt;p&gt;I then created a function, &amp;quot;find_images&amp;quot; that accepted a parameter. First the function would create a variable to store all the files of the source directory.&lt;/p&gt;
&lt;p&gt;Next I wrote the iteration process on the files by opening each file as &lt;em&gt;read and write&lt;/em&gt;, and storing that text as a variable &amp;quot;md.&amp;quot; Then for the variable &amp;quot;md&amp;quot; I ran a substitute regex. The regex looked for the markdown syntax and a few different extensions and created a few groups. It&#39;d then replace the markdown syntax and using the groups and preserve the image file name within the new Nunjucks syntax. The function then sought out the beginning of the text and wrote the changed text structure to each file.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/bin/python3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Import modules&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Path

&lt;span class=&quot;token comment&quot;&gt;# Set target directory&lt;/span&gt;
src_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home/directory/of/your/blog/&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;find_images&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;glob&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      md &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      md &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;!&#92;[.*?&#92;]&#92;(&#92;/assets&#92;/img&#92;/(.*&#92;.png|.*&#92;.JPG|.*&#92;.jpg)&#92;)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;&amp;lt;div class=&quot;&lt;/span&gt;grid&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&amp;lt;div&gt;&amp;lt;img src=&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;img&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;g&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; loading=&quot;&lt;/span&gt;lazy&lt;span class=&quot;token string&quot;&gt;&quot; title=&quot;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;&amp;lt;/div&gt;&amp;lt;div&gt;&amp;lt;/div&gt;&amp;lt;/div&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        md&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seek&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;md&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Text replaced&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


find_images&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;src_dir&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rewriting-self-referring-links&quot;&gt;Rewriting Self-Referring Links&lt;/h3&gt;
&lt;p&gt;This script is virtually the same as the one above, it just uses a different regex to isolate links referring to https://christopherbauer.org and substitute the date format from forward slashes to dashes using groups. It has different variable names for the loops as well.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/bin/python3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Import modules&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Path

&lt;span class=&quot;token comment&quot;&gt;# Set target directory&lt;/span&gt;
src_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home/directory/of/your/blog/&quot;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;find_images&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;glob&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;https&#92;:&#92;/&#92;/christopherbauer&#92;.org&#92;/(&#92;d{4})&#92;/(&#92;d{2})&#92;/(&#92;d{2})&#92;/(&#92;w.*)&#92;.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;https://christopherbauer.org/blog/&#92;1-&#92;2-&#92;3-&#92;4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seek&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Text replaced&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


find_images&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;src_dir&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I bet that these scripts won&#39;t be immediately useful to everyone transitioning from Jekyll to 11ty, given the idiosyncrasies of constructing static websites. Even websites with popular generators such as Jekyll vary quite a bit given theming and other custom configurations going on under the hood. Nevertheless, I hope these scripts will be useful.  Even if readers don&#39;t use them line for line, they can serve as inspiration for other bloggers to modify their posts and ease the transition process.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Graylog on Proxmox with Ansible for Rsyslog Client Config</title>
    <link href="https://christopherbauer.xyz/blog/graylog-revised/" />
    <updated>2025-01-24T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/graylog-revised/</id>
    <content type="html">&lt;p&gt;Content Overview&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#introduction&quot; class=&quot;primary&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#creating-the-vm&quot; class=&quot;primary&quot;&gt;Creating the VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#installation-and-configuration&quot; class=&quot;primary&quot;&gt;Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#automating-client-rsyslog-configurations-with-ansible&quot; class=&quot;primary&quot;&gt;Automating Client Rsyslog Configurations with Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;After some thought, I realized installing Graylog is sufficiently complicated that I&#39;m revising my original post to include installation steps.&lt;/p&gt;
&lt;p&gt;In this post I first outline two obstacles to be aware of in creating a VM on Proxmox for Graylog. I then cover the installation steps for OpenSearch, MongoDB and Graylog. In the final part, I offer an overview of how you can use Ansible to configure clients to send Graylog logs using rsyslog.&lt;/p&gt;
&lt;h4 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h4&gt;
&lt;p&gt;The approach of this post assumes the reader is comfortable with the Linux command line and desires to install the Graylog Open version on a Proxmox Ubuntu 22.04 virtual machine, and wants to install OpenSearch on the self-same machine as Graylog. These instructions don&#39;t consider use of a proxy or TLS requirements.&lt;/p&gt;
&lt;p&gt;One note of warning: be prepared for Graylog&#39;s RAM consumption. Graylog is a RAM hog. You&#39;ll see your RAM usage shoot up so it&#39;d pay to go into this project with your eyes open.&lt;/p&gt;
&lt;h3 id=&quot;creating-the-vm&quot;&gt;Creating the VM&lt;/h3&gt;
&lt;p&gt;I&#39;m going to cover two notes on how to make an install of Graylog on a Proxmox VM go more smoothly. If I&#39;d known about these challenges ahead of time I could have saved myself a little pain.&lt;/p&gt;
&lt;h4 id=&quot;in-brief&quot;&gt;In Brief&lt;/h4&gt;
&lt;p&gt;Stick with Ubuntu 22.04 and select &amp;quot;Host&amp;quot; as the CPU for the VM creation parameters.&lt;/p&gt;
&lt;h4 id=&quot;in-detail&quot;&gt;In Detail&lt;/h4&gt;
&lt;p&gt;I went with a VM because Graylog is a bit of a beast, requiring multiple different components and lots of RAM. I believe people have installed it on LXC containers, but I figured I&#39;d run into fewer problems this way. Well, at least fewer problems than I would otherwise. Not absent problems.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; issue was relatively trivial but time consuming to figure out. I figured I&#39;d put Graylog on the latest Ubuntu LTS (24.04). It took a full install cycle using the &lt;a href=&quot;https://wiki.ubuntu.com/Installer/FAQ&quot;&gt;Ubuntu Debian-Installer&lt;/a&gt; and troubleshooting to realize that MongoDB wouldn&#39;t play nice with that version. MongoDB is required for Graylog&#39;s function so this wasn&#39;t something I could figure out later. Lesson learned. As of this writing, I used 22.04.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;second&lt;/strong&gt; was that MongoDB&lt;a href=&quot;https://forum.proxmox.com/threads/mongo-db-5-0-not-install.95857/post-440005&quot;&gt; doesn&#39;t play nice with Proxmox&#39;s defaults&lt;/a&gt;. I had learned and subsequently forgotten this one from a previous encounter with MongoDB. In particular, I had to tweak an option that I otherwise never change regarding the processor, as MongoDB cannot work on the default selection of x86-64-v2-AES. In the VM creation guide, on the CPU tab, for &amp;quot;Type,&amp;quot; I had to set the processor to &lt;em&gt;host&lt;/em&gt; in order for it to function correctly in the VM.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2025-01-21_11-41.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;installation-and-configuration&quot;&gt;Installation &amp;amp; Configuration&lt;/h3&gt;
&lt;p&gt;Regarding the install process, we&#39;ll work through four stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &amp;amp; configure OpenSearch to store the log entries that Graylog collects&lt;/li&gt;
&lt;li&gt;Install MongoDB to store Graylog&#39;s metadata&lt;/li&gt;
&lt;li&gt;Install the Graylog Data Node&lt;/li&gt;
&lt;li&gt;Install the Graylog server&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;installing-opensearch&quot;&gt;Installing OpenSearch&lt;/h4&gt;
&lt;p&gt;I&#39;m borrowing from &lt;a href=&quot;https://github.com/Graylog2/se-poc-docs/blob/main/src/On%20Prem%20POC/installing%20opensearch.md&quot;&gt;this Graylog repo&#39;s instructions&lt;/a&gt; on installing OpenSearch.&lt;/p&gt;
&lt;p&gt;First, update and upgrade the VM. Restart if required.&lt;/p&gt;
&lt;p&gt;Take note of the IP address (if you need to, run &lt;code&gt;ip a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Verify the required dependencies are met.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; lsb-release ca-certificates &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; gnupg2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download signing key.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -o- https://artifacts.opensearch.org/publickeys/opensearch.pgp &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; gpg &lt;span class=&quot;token parameter variable&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--batch&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--yes&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/opensearch-keyring&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create repository file.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;deb [signed-by=/usr/share/keyrings/opensearch-keyring] https://artifacts.opensearch.org/releases/bundle/opensearch/2.x/apt stable main&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/opensearch-2.x.list&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install OpenSearch.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set a temporary password for installation.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;OPENSEARCH_INITIAL_ADMIN_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-dc&lt;/span&gt; A-Z-a-z-0-9_@&lt;span class=&quot;token comment&quot;&gt;#%^-_=+ &amp;lt; /dev/urandom  | head -c${1:-32}&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;opensearch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2.15&lt;/span&gt;.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set default value for heap variable.&lt;/p&gt;
&lt;pre class=&quot;language-Bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-Bash&quot;&gt;tmpheap=1&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;configuring-opensearch&quot;&gt;Configuring OpenSearch&lt;/h4&gt;
&lt;p&gt;Back up the original OpenSearch configuration.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; /etc/opensearch/opensearch.yml /etc/opensearch/opensearch.yml.bak&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the new configuration with parameters set to Graylog&#39;s requirements.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cluster.name: graylog
node.name: &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token environment constant&quot;&gt;HOSTNAME&lt;/span&gt;}&lt;/span&gt;
path.data: /var/lib/opensearch
path.logs: /var/log/opensearch
transport.host: 0.0.0.0
network.host: 0.0.0.0
http.port: 9200
discovery.type: single-node
action.auto_create_index: false
plugins.security.disabled: true
indices.query.bool.max_clause_count: 32768&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tee&lt;/span&gt; /etc/opensearch/opensearch.yml&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;installing-mongodb&quot;&gt;Installing MongoDB&lt;/h4&gt;
&lt;p&gt;Once I &lt;a href=&quot;http://christopherbauer.org/blog/graylog-revised/#creating-the-vm&quot; class=&quot;primary&quot;&gt;configured the vm properly&lt;/a&gt; , I followed &lt;a href=&quot;https://go2docs.graylog.org/current/downloading_and_installing_graylog/ubuntu_installation.htm#aanchor21&quot;&gt;the official docs &lt;/a&gt; for an Ubuntu install without problems. Those same instructions appear here.&lt;/p&gt;
&lt;p&gt;Set a timezone.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; timedatectl set-timezone UTC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install gnupg.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gnupg &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Import the key for MongoDB.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-fsSL&lt;/span&gt; https://www.mongodb.org/static/pgp/server-6.0.asc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; gpg &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/mongodb-server-6.0.gpg &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
   &lt;span class=&quot;token parameter variable&quot;&gt;--dearmor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a list file for MongoDB.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/mongodb-org-6.0.list&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload the local package database.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the latest stable version of MongoDB.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; mongodb-org&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&#39;t use proxies, so if you do refer to &lt;a href=&quot;https://go2docs.graylog.org/current/downloading_and_installing_graylog/ubuntu_installation.htm#aanchor21&quot;&gt;the official docs &lt;/a&gt;, then Enable.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; mongod.service&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl restart mongod.service&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token parameter variable&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;service &lt;span class=&quot;token parameter variable&quot;&gt;--state&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;active &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; mongod&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Freeze the MongoDB version.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; apt-mark hold mongodb-org&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;installing-the-graylog-data-node&quot;&gt;Installing the Graylog Data Node&lt;/h4&gt;
&lt;p&gt;Get the Graylog repo as a package.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://packages.graylog2.org/repo/packages/graylog-6.1-repository_latest.deb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install it.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; dpkg &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; graylog-6.1-repository_latest.deb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The repositiories your package manager checks should now include Graylog&#39;s repos. Update them.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install Graylog.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; graylog-datanode&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;configuring-the-graylog-data-node&quot;&gt;Configuring the Graylog Data Node&lt;/h4&gt;
&lt;p&gt;To conform to the OpenSearch requirements check the vm.max count to ensure it is set to at least 26144.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /proc/sys/vm/max_map_count&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it isn&#39;t, you can use the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;vm.max_map_count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;262144&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload the config.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sysctl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a password secret and copy the output to a file editor.  You&#39;ll need it for the next step and later as well.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; /dev/urandom &lt;span class=&quot;token function&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-dc&lt;/span&gt; A-Z-a-z-0-9 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; -c&lt;span class=&quot;token variable&quot;&gt;${1&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;96}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open the config file using vim (you can use nano if you prefer something straighforward). Paste the above into the &lt;code&gt;password_secret&lt;/code&gt; line, no quotations.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; /etc/graylog/datanode/datanode.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable the Graylog service.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; graylog-datanode.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensure it has started.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl start graylog-datanode&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;install-graylog-server&quot;&gt;Install Graylog Server&lt;/h4&gt;
&lt;p&gt;Install the Graylog server.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; graylog-server&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;configure-the-graylog-server&quot;&gt;Configure the Graylog Server&lt;/h4&gt;
&lt;p&gt;Generate a password and copy it before opening the config file in the next step.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Enter Password: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;/dev/stdin &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;n&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; sha256sum &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cut&lt;/span&gt; -d&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-f1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add your password secret generated during the Graylog Node configuration step to the server config file with the line &lt;code&gt;password_secret&lt;/code&gt;. Then add the password you generated above to the line &lt;code&gt;root_password_sha2&lt;/code&gt;. Select an alternative username for &lt;code&gt;root_username&lt;/code&gt; if you desire.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; /etc/graylog/server/server.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set the &lt;code&gt;http_bind_address&lt;/code&gt; value in the Graylog configuration file to the public host name or a public IP address for the machine to which you can connect.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;s/#http_bind_address = 127.0.0.1.*/http_bind_address = 0.0.0.0:9000/g&#39;&lt;/span&gt; /etc/graylog/server/server.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable Graylog during the operating system’s startup.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl daemon-reloadsudo systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; graylog-server.servicesudo systemctl start graylog-server.servicesudo systemctl &lt;span class=&quot;token parameter variable&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;service &lt;span class=&quot;token parameter variable&quot;&gt;--state&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;active &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; graylog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that you should be able to proceed to IP assigned to your VM with the port 9000 and find the login page (e.g. http:// 192.168.0.1:9000).&lt;/p&gt;
&lt;h3 id=&quot;automating-client-rsyslog-configurations-with-ansible&quot;&gt;Automating Client Rsyslog Configurations with Ansible&lt;/h3&gt;
&lt;p&gt;Take what follows as a rough model rather than specific directions.&lt;/p&gt;
&lt;p&gt;Next, there was the matter of configuring my machines &lt;a href=&quot;https://go2docs.graylog.org/current/getting_in_log_data/syslog_inputs.html&quot;&gt;to send logs to Graylog&lt;/a&gt;. Graylog offers a &lt;a href=&quot;https://go2docs.graylog.org/current/getting_in_log_data/inputs.htm&quot;&gt;variety of different ways&lt;/a&gt; to accept logs from client machines. I went with Rsyslog.&lt;/p&gt;
&lt;p&gt;Now, I could have ssh-ed into each individual machine and altered the &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; file by hand to include:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;@@yourgraylog&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;org&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;514&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;RSYSLOG_SyslogProtocol23Format&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, from the start this task seemed ripe for automation.&lt;/p&gt;
&lt;p&gt;I built an Ansible script to ensure rsyslog was installed and then to configure it on the clients. I&#39;d been playing around with Ansible over the weekend, and the YAML format is great compared to writing everything out in pure python.&lt;/p&gt;
&lt;p&gt;Be aware, while the Ansible code can be found below, there are a bunch of configuration challenges to Ansible that can sidetrack you for hours. I can think of at least two off the top of my head. First, I used the code below as an &lt;a href=&quot;https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html&quot;&gt;Ansible Role&lt;/a&gt;. Covering what that means, and how to setup Ansible, is far beyond the scope of this article. If you&#39;re new to it, plan some free hours to start toying around. Start with &lt;a href=&quot;https://docs.ansible.com/ansible/latest/getting_started/index.html&quot;&gt;the docs&lt;/a&gt;; they&#39;re just average but they&#39;re worth it for just getting started. Second, if you use &lt;em&gt;sudo&lt;/em&gt; with a password on the target, you&#39;ll want to use Ansible-Vault. However, the whole way Ansible Vault works is super unclear to me. I hope to write up a blog post about it sometime. I&#39;m afraid I don&#39;t have a confirmed solution for it as of this writing. Also, I can&#39;t help if you are thinking of windows hosts, I don&#39;t have windows clients.&lt;/p&gt;
&lt;p&gt;Because this is a role &lt;em&gt;main.yml&lt;/em&gt; file, it may seem truncated. To explain, the first section determines whether rsyslog is installed. The second determines whether the Graylog code for forwarding the logs is already present in the &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; file, and if not, adds it to the final line. The final section then restarts the rsyslog server.&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install rsyslog
  &lt;span class=&quot;token key atrule&quot;&gt;ansible.builtin.apt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rsyslog

&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Add instruction to dispatch logs to graylog
  &lt;span class=&quot;token key atrule&quot;&gt;ansible.builtin.lineinfile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /etc/rsyslog.conf
    &lt;span class=&quot;token key atrule&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*.*@@YOUR_IP_HERE;RSYSLOG_SyslogProtocol23Format&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;*.&#92;*@@YOUR_IP_HERE;RSYSLOG_SyslogProtocol23Format&#39;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; present
    &lt;span class=&quot;token key atrule&quot;&gt;insertafter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; EOF
    &lt;span class=&quot;token key atrule&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Restart rsyslog
  &lt;span class=&quot;token key atrule&quot;&gt;ansible.builtin.shell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; systemctl restart rsyslog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;d then run that using Ansible as a role in your playbook.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Admittedly, this is a post with a niche attraction, but nevertheless I hope it may help someone in the future. Should you have any questions, don&#39;t hesitate to DM me on &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon&lt;/a&gt; .&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Installing VSFTP in a Proxmox LXC Container Or: &quot;How I Learned the Lessons of the SysAdmin&quot;</title>
    <link href="https://christopherbauer.xyz/blog/2025-01-07-vsftpd/" />
    <updated>2025-01-07T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/2025-01-07-vsftpd/</id>
    <content type="html">&lt;p&gt;To make a long story short, I don&#39;t want my NAS to be multipurpose for reasons of admin. I only want it to be a backup server, nothing more. So I thought I&#39;d write up a quick primer on installing and configuring VSFTP in a Proxmox LXC container.&lt;/p&gt;
&lt;h3 id=&quot;a-progression-to-the-sysadmin-perspective&quot;&gt;A Progression to the SysAdmin Perspective&lt;/h3&gt;
&lt;p&gt;I don&#39;t think I have more services running than the next home-labatista on the block, but I do have an above average awareness of security and so I&#39;m assiduous about ensuring services are installed correctly, hardened, and everything from OS to apps are upgraded. That means that as the number of services I run grows, I find I&#39;m spending lots of time on admin. It&#39;s not that I don&#39;t like doing admin, its that I don&#39;t like doing lots of admin while being inefficient amidst growing workflows. As the VM and container workflows have multiplied, I&#39;ve looked to simplify things. While I&#39;m sure automation might help me here, I&#39;m seeking simplicity of a mental sort to start.&lt;/p&gt;
&lt;p&gt;After listening to &lt;a href=&quot;https://2.5admins.com/2-5-admins-178/&quot;&gt;2.5 Admins # 178&lt;/a&gt;, I&#39;ve taken the principle of having critical services running on dedicated hardware and extended it another step. I want non-hypervisor hardware, especially hardware running uncommon OSes such as Synology&#39;s Disk Station Manager, to be dedicated to only one service as a rule. If the appliance is designed as a network attached storage device, then let it be a backup server only. Running a slew of Docker containers across a Proxmox host, a Raspberry Pi and who knows what else is too taxing from a management standpoint. That is what Proxmox is for; let the Raspberry Pi run a Meshtastic node alone.&lt;/p&gt;
&lt;p&gt;I can see that I&#39;m privileged to have a NAS appliance and a separate hypervisor, allowing me to separate a backup server from, say, a media server, instead of using the NAS to simultaneously provide multiple services itself. All the same, at a cognitive level, I find it easier to manage many home-lab services when they are segregated according to hardware. Proxmox with its ease of management and easy backups can then handle the multipurpose role.&lt;/p&gt;
&lt;p&gt;Perhaps this is the journey all professional SysAdmins go through, from disorganization and shabby practices when they have a lone VM to keep up, to anticipation, planning, and automation when they manage a small fleet. Okay, yeah, maybe that is just me.&lt;/p&gt;
&lt;h3 id=&quot;why-ftp&quot;&gt;Why FTP?&lt;/h3&gt;
&lt;p&gt;In part, curiosity.  While working on my OSCP cert, it got to the point were I&#39;d groan anytime I fired up nmap and got a result with &amp;quot;vsftp&amp;quot; in the output.  It was almost never vulnerable.  And exploiting web vulnerabilities through exposed FTP shares came to be a tried and true path for initial webshell foothold.&lt;/p&gt;
&lt;p&gt;It&#39;s also partly a workflow preference.  I have PDF Expert on my Ipad, and FTPS has been the only consistently stable protocol I can use to connect to a file server where my PDFs are located.  I tried SMB for a spell, but my IOS seems to hate that protocol and regularly drops the connection. The only work around I could find was to refresh the connection by manually opening the remote share in the file browser.  FTPS by contrast has been hassel-free, so I&#39;m sticking with it for PDF reading on the tablet.&lt;/p&gt;
&lt;p&gt;Of course, I could just use SFTP and skip the work of setting up a dedicated FTP server, but then I wouldn&#39;t learn anything.  So, I installed Very Secure File Transfer Protocol Daemon (&lt;a href=&quot;https://security.appspot.com/vsftpd.html&quot;&gt;vsftpd&lt;/a&gt;) to handle file transfers on my LAN, and let my NAS be just about backups.&lt;/p&gt;
&lt;h3 id=&quot;lxc-container-creation&quot;&gt;LXC Container Creation&lt;/h3&gt;
&lt;p&gt;To be forthright, the &lt;a href=&quot;https://wiki.archlinux.org/title/Very_Secure_FTP_Daemon&quot;&gt;Arch Wiki&lt;/a&gt; on vsftpd is concise and accurate if you need another reference. Credit where credit is due, I used that wiki, as well as the &lt;a href=&quot;https://wiki.debian.org/vsftpd&quot;&gt;Debian wiki&lt;/a&gt; and &lt;a href=&quot;https://help.ubuntu.com/community/vsftpd&quot;&gt;Ubuntu community page on vsftpd&lt;/a&gt; for the steps below.&lt;/p&gt;
&lt;p&gt;First, &lt;a href=&quot;https://pve.proxmox.com/wiki/Linux_Container&quot;&gt;create&lt;/a&gt; an LXC container. This should be straightforward, and it&#39;s out of scope to cover the steps to inception here. Broadly speaking, I prefer using Ubuntu LTS container templates so I don&#39;t get caught out in a year or two when some breaking change requires that I upgrade the distro before I can upgrade the software.&lt;/p&gt;
&lt;p&gt;I prefer SSH keys for admin, so that first tab is a place where I tend to create and add a public key. Regarding memory and CPU, I erred on the lower side of things, with 1 core, 2048 RAM and default storage. I didn&#39;t put this particular LXC on a VLAN, though if you&#39;ve already set up a VLAN bridge in Proxmox corresponding to your router&#39;s VLAN, then it is as simple as adding the VLAN tag in the networking tab.&lt;/p&gt;
&lt;h3 id=&quot;install-and-config-of-vsftpd&quot;&gt;Install &amp;amp; Config of VSFTPD&lt;/h3&gt;
&lt;p&gt;Installation is the easy part. For Debian or Ubuntu, you need only use &lt;code&gt;apt install vsftpd&lt;/code&gt; to install using package manager.&lt;/p&gt;
&lt;p&gt;Before configuring, I changed the hosts file to specify connections only from an RFC 1918 IP address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Allow all connections
vsftpd: ALL
# IP address range
vsftpd: 10.0.0.0/255.255.255.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration of vsftp takes place through a file, &lt;code&gt;/etc/vsftpd.conf&lt;/code&gt;. Below are the options I selected. Your requirements may differ, so please refer to the &lt;a href=&quot;https://wiki.archlinux.org/title/Very_Secure_FTP_Daemon&quot;&gt;Arch Wiki&lt;/a&gt; on vsftpd for derivations.&lt;/p&gt;
&lt;p&gt;This config assumes that you&#39;ve assigned a system user as designated to access FTP, perhaps using &lt;code&gt;adduser SOME_NEW_USERNAME&lt;/code&gt;.  If at any point you can&#39;t find the entries below, simply add them to &lt;code&gt;vsftpd.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Disallow anonymous login:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;anonymous_enable=NO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Allowing uploading:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;write_enable=YES
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chroot users by default, ensuring they can&#39;t access whole file system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chroot_local_user=YES 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;chroot_list_enable=NO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure the user&#39;s home directory has the following permissions in accordance with the chroot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod a-w /home/SOME_NEW_USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;chmod 555 /home
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can create folders under that user that will: be writable for the FTP server.&lt;/p&gt;
&lt;p&gt;Then, set the FTP user&#39;s shell to false:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usermod -s /bin/false SOME_NEW_USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to add that false shell to the shells list :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo /bin/false &amp;gt;&amp;gt; /etc/shells
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add TLS by first creating a self-signed cert for FTPS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc/ssl/certs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout vsftpd.pem -out vsftpd.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;chmod 600 vsftpd.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then add the following to &lt;code&gt;/etc/vsftpd.conf&lt;/code&gt; to take advantage of that new certificate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssl_enable=YES

# if you accept anonymous connections, you may want to enable this setting
#allow_anon_ssl=NO

# by default all non anonymous logins and forced to use SSL to send and receive password and data, set to NO to allow non secure connections
force_local_logins_ssl=NO
force_local_data_ssl=NO

# TLS v1 protocol connections are preferred and this mode is enabled by default while SSL v2 and v3 are disabled
# the settings below are the default ones and do not need to be changed unless you specifically need SSL
#ssl_tlsv1=YES
#ssl_sslv2=NO
#ssl_sslv3=NO

# provide the path of your certificate and of your private key
# note that both can be contained in the same file or in different files
rsa_cert_file=/etc/ssl/certs/vsftpd.pem
rsa_private_key_file=/etc/ssl/certs/vsftpd.pem

# this setting is set to YES by default and requires all data connections exhibit session reuse which proves they know the secret of the control channel.
# this is more secure but is not supported by many FTP clients, set to NO for better compatibility
require_ssl_reuse=NO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be it. You can check the status is &lt;em&gt;enabled&lt;/em&gt; and &lt;em&gt;active&lt;/em&gt; by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status vsftpd.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then confirm by ftp-ing in from another machine (you might have to install first: &lt;code&gt;apt install ftp&lt;/code&gt;). Get the IP address of the vsftp server (&lt;code&gt;ip a&lt;/code&gt;) and try to log in with the system user&#39;s creds:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ftp SOME_VSFTP_SERVER
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For troubleshooting, if you get an error like &amp;quot;500 OOPS: vsftpd: refusing to run with writable root inside chroot(),&amp;quot; then look into the permissions on the home folder of user you set up for access.&lt;/p&gt;
&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h3&gt;
&lt;p&gt;There you have it, a very secure FTP server to integrate with all your file reader/clients on the local network. Of course you can set up Tailscale if you&#39;d like to offer it up while away from your LAN, as that would be vastly preferable to opening up ports on your router.&lt;/p&gt;
&lt;p&gt;In any event, I hope this helped, and best of luck in whatever computing journey you find yourself on.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Quick Pointer: Abusing DACL Fumbles using PowerView</title>
    <link href="https://christopherbauer.xyz/blog/2024-12-12-pv-dacl-mods/" />
    <updated>2024-12-12T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/2024-12-12-pv-dacl-mods/</id>
    <content type="html">&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-12-11_10-09.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ever come across an edge description in Boodhound on DACL abuse? They tend to look something like the above.&lt;/p&gt;
&lt;p&gt;The Windows abuse instructions on the edge tend to offer two ways to proceed, either using &lt;em&gt;net group&lt;/em&gt; from net.exe or PowerView. I&#39;ve always used the net.exe method, but they recommend PowerView because the opsec for net.exe is challenging.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-12-12_08-59.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I was curious to play around with PowerView&#39;s &lt;em&gt;Add-DomainGroupMember&lt;/em&gt; to have another option in my toolbox and find out more about this improved opsec. Unfortunately, I&#39;ve run into this Bloodhound description enough times to know that the steps for the PowerView method aren&#39;t quite as clearly laid out in the Bloodhound description as they could be. I don&#39;t think it&#39;s Bloodhound&#39;s fault, as the &lt;a href=&quot;https://powersploit.readthedocs.io/en/latest/Recon/Add-DomainGroupMember/&quot; class=&quot;primary&quot;&gt;original instructions&lt;/a&gt;  aren&#39;t effusive by any means.&lt;/p&gt;
&lt;h2 id=&quot;adding-an-existing-user-to-domain-admins-by-modifying-the-dacl&quot;&gt;Adding an Existing User to Domain Admins by Modifying the DACL&lt;/h2&gt;
&lt;p&gt;To make it clearer, here are the steps to follow on a compromised domain-joined target. This will add an existing user (for which you have obtained a password), who already has DACL privileges over the Domain Admins group, to the Domain Admins group itself. For the sake of this example, lets say the user credentials we&#39;ve compromised and want to add to Domain Admins is &lt;code&gt;paul.atreides:spicyworm&lt;/code&gt; on a domain with a short name of &lt;em&gt;arrakis&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First, it might pay to ensure you&#39;re authenticated to the Domain Controller as a member of the domain. Set up the creds as variables in Powershell and then use &lt;em&gt;Add-DomainObjectAcl&lt;/em&gt; to authenticate.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$SecPassword = ConvertTo-SecureString &#39;spicyworm&#39; -AsPlainText -Force
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$Cred = New-Object System.Management.Automation.PSCredential(&#39;arrakis&#92;paul.atreides&#39;, $SecPassword)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Add-DomainObjectAcl -Credential $Cred -TargetIdentity &amp;quot;Domain Admins&amp;quot; -PrincipalIdentity paul.atreides -Rights WriteMembers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m no PowerShell expert, but you probably don&#39;t need to reenter the following two variables again. I&#39;m doing so for the sake of effectiveness.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$SecPassword = ConvertTo-SecureString &#39;spicyworm&#39; -AsPlainText -Force
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$Cred = New-Object System.Management.Automation.PSCredential(&#39;arrakis&#92;paul.atreides&#39;, $SecPassword)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now add the existing domain user, paul.atreides, who has DACL privileges over Domain Admins group, to the Domain Admins group.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Add-DomainGroupMember -Identity &#39;Domain Adims&#39; -Members &#39;paul.atreides&#39; -Credential $Cred
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can verify whether the operation succeeded.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-DomainGroupMember -Identity &#39;Domain Admins&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;moving-forward&quot;&gt;Moving Forward&lt;/h2&gt;
&lt;p&gt;If successful, from there your options should open up a bit to lateral movement, or obtaining hashes among other possibilities.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Installing Game of Active Directory on Proxmox: Part 6 - OpenVPN</title>
    <link href="https://christopherbauer.xyz/blog/2024-11-23-goad-vpn/" />
    <updated>2024-11-23T00:00:00Z</updated>
    <id>https://christopherbauer.xyz/blog/2024-11-23-goad-vpn/</id>
    <content type="html">&lt;p&gt;This is part 6 of my series on &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/tree/main&quot;&gt;Orange Cyberdefense&#39;s&lt;/a&gt; Game of Active Directory (GOAD) on Proxmox VE. In the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-17-goad-ansible&quot;&gt;fifth installment&lt;/a&gt; I covered how to use Ansible to configure the final domain layout and individual Windows VMs. In this post we&#39;ll setup the VPN server on pfSense to simulate an assumed breach.&lt;/p&gt;
&lt;p&gt;As I mentioned before, I&#39;m deeply indebted to Mayfly277&#39;s &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;canonical guide&lt;/a&gt;, and this post follows Mayfly277&#39;s work closely to provide readers with a resource to be used as a standalone or as a supplement.&lt;/p&gt;
&lt;p&gt;Should you need more orientation to the context of this series, or on my rationale for creating it, see &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;first post&lt;/a&gt; in this series.&lt;/p&gt;
&lt;p&gt;Mayfly277&#39;s instructions for this VPN section left me scratching my head at various points. I found two steps where my setup would fail if I followed his instructions on my machine. I&#39;ll make note of those deviations in what follows.&lt;/p&gt;
&lt;h2 id=&quot;pfsense-and-openvpn&quot;&gt;pfSense &amp;amp; OpenVPN&lt;/h2&gt;
&lt;h3 id=&quot;creating-the-ca&quot;&gt;Creating the CA&lt;/h3&gt;
&lt;p&gt;One note before we start, Mayfly277&#39;s &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;guide&lt;/a&gt; has some helpful graphics on his screenshots to draw your eye directly to what needs modifying. Should you get confused about what needs modifying in the following steps, head over there and you should be able to sort it out quickly.&lt;/p&gt;
&lt;p&gt;The first step involves creating a certificate authority to issue a certificate. Go to the system menu and select the Certificates option.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-23_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-23.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Under the Authorities tab click the green Add button at the bottom, and it&#39;ll take to to the following page where you&#39;ll give a descriptive name and a common name. I&#39;ve used VLAN 30 (this is according to my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;unique arrangement&lt;/a&gt;, if you followed Mayfly277&#39;s instructions you&#39;d use 10).&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-24.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Click save and you should have something like this:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-25.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;create-the-certificate-server&quot;&gt;Create the Certificate Server&lt;/h3&gt;
&lt;p&gt;Click the Certificates tab, and click the green Add button at the bottom. That&#39;ll bring up the new certificate page where you&#39;ll add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a decriptive name&lt;/li&gt;
&lt;li&gt;Select the CA you created&lt;/li&gt;
&lt;li&gt;Set lifetime to 3650&lt;/li&gt;
&lt;li&gt;Add a common name&lt;/li&gt;
&lt;li&gt;Select the server certificate type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then save.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-25_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-27.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-27_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you save the Certificates page will look like this:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-28.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;create-a-vpn-user&quot;&gt;Create a VPN User&lt;/h3&gt;
&lt;p&gt;Now we&#39;ll create a local user who can access the VPN. Go to the System menu and select User Manager.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-28_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Under the Users tab, select the green Add button to create a new user.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-28_2.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Select a username and password, a descriptive name for the user certificate and select the CA you created.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-30.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you hit save the user page will look like this:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-31.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;create-the-open-vpn-service&quot;&gt;Create the Open VPN Service&lt;/h3&gt;
&lt;p&gt;Now we&#39;ll create the service operating on the server. Go to the VPN menu and select OpenVPN.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-31_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Under the Servers tab, click on the Green add button. You&#39;ll make several modifications on this page. The first set are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the description&lt;/li&gt;
&lt;li&gt;Change Server mode to &amp;quot;Remote Access (SSL/TLS + User Auth)&amp;quot;&lt;/li&gt;
&lt;li&gt;Enter &amp;quot;Local Database&amp;quot; into the Backend for authentication field&lt;/li&gt;
&lt;li&gt;Change the local port to 2137&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-32.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modifications continued:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change Peer Certificate Authority to the CA you created&lt;/li&gt;
&lt;li&gt;Change Server certificate to the certificate you created&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-33.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modifications continued:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change IPv4 Tunnel Network to 10.10.10.0/24&lt;/li&gt;
&lt;li&gt;Change IPv4 Local network to 192.168.30.0/24&lt;/li&gt;
&lt;li&gt;Change concurent connections to 10&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-34.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modifications continued:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the network configuration in the Topology dropdown to &amp;quot;net30 -- Isolated /30 network per client&amp;quot;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-35.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, make sure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS Server Enabled is checked&lt;/li&gt;
&lt;li&gt;DNS server 1 reads 192.168.30.1 (this is according to my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;unique arrangement&lt;/a&gt;, if you followed Mayfly277&#39;s instructions you&#39;d use 10)&lt;/li&gt;
&lt;li&gt;That the Custom options field under Advanced Configruation reads &amp;quot;auth-nocache&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-36.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-36_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;openvpn-client-export-package&quot;&gt;OpenVPN Client Export Package&lt;/h3&gt;
&lt;p&gt;Now we&#39;ll search for and install the OpenVPN package for Client Export that&#39;ll add a new tab to the OpenVPN pages. Go to System and then Package Manager.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-37.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Enter &amp;quot;client-export&amp;quot; into the search term and click the green install button on the entry named &amp;quot;openvpn-client-export.&amp;quot;&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-37_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-37_2.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next click the client export tab.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-38.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That&#39;ll bring up a new page where we&#39;ll create the VPN certificate for export.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_13-47.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This section of Mayfly277&#39;s guide was not clear on configuring the client export step. When mayfly277 says change the Host Name Resolution to &amp;quot;Other&amp;quot; in the exporting the client certificate step, there is a blurred image. In the context of these posts, where we&#39;re installing GOAD on a bare-metal instance of Proxmox with an existing true LAN, so we&#39;ll use &lt;em&gt;the IP of the Proxmox host&lt;/em&gt; for &amp;quot;Host Name.&amp;quot;&lt;/p&gt;
&lt;p&gt;Once you&#39;ve done that, scoll to the bottom section OpenVPN clients and click under the Export column &amp;quot;Inline Configurations - Most Clients.&amp;quot; Download that certificate to your Kali/attack machine.&lt;/p&gt;
&lt;h3 id=&quot;enable-the-ovpns1-interface&quot;&gt;Enable the ovpns1 Interface&lt;/h3&gt;
&lt;p&gt;At this point there seemed to be something missing from Mayfly277&#39;s instructions. I eventually pieced together that I needed to enable the goadvpn interface with the help of &lt;a href=&quot;https://koller.ninja/proxmox-goad-lab&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Head to the Interfaces menu and select assignments. There should now be an entry there called &amp;quot;goadvpn,&amp;quot; click on that blue name/link on the left side. That&#39;ll open up its page and make sure the Enable Interface box is checked, then change the description and click the green Apply Changes box that comes up.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_14-18.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
Your interface assignments will then look something like this:
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_14-18_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You&#39;ll want to enable this interface before you get to the &amp;quot;Configure Firewall&amp;quot; steps.&lt;/p&gt;
&lt;h3 id=&quot;firewall-rules-review&quot;&gt;Firewall Rules Review&lt;/h3&gt;
&lt;p&gt;Honestly, the most challanging part of setting up GOAD was configuring the firewall rules, so take this review of my rules with a grain of salt. These work for me, but they took quite a bit of tinkering. I&#39;m not an expert at firewall rules, so if you spot an error, please let me know by direct messaging me on Mastodon.&lt;/p&gt;
&lt;p&gt;The WAN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_14-03.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The LAN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-23_10-18.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The VLAN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_14-24.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The VPN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-17_14-37.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Post-series edit:&lt;/em&gt; After writing up this series up and exploring on my own, I discovered that VLAN machines couldn&#39;t access the internet.  As a consquence, I couldn&#39;t make them call on my server to download payloads.  I looked into it, and as mentioned in &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/issues/177#issuecomment-1927681503&quot;&gt;this github issue&lt;/a&gt;, I think a rule is missing from the VLAN firewall.  To remedy the problem, I tried a number of targeted rules that essentially reversed the OVPN rule, to no effect. As a short-term workaround, I created an allow any any rule.  My VLAN rules are now kind of a mess, see below.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-12-04_13-38.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;confirming-vpn-access-to-the-domain&quot;&gt;Confirming VPN Access to the Domain&lt;/h2&gt;
&lt;p&gt;Now use &lt;code&gt;sudo openvpn &amp;lt;YOUR_CERTIFICATE&amp;gt;&lt;/code&gt; to connect, and it&#39;ll prompt you for the user and password you created. Once you do that, it should connect successfully.&lt;/p&gt;
&lt;p&gt;To confirm you can reach the VLAN from your attacking machine, use NetExec to do a simple SMB sweep without a domain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nxc smb 192.168.&amp;lt;YOUR_VLAN&amp;gt;.&amp;lt;HERE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.xyz/img/2024-11-23_10-09.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;concluding-the-series&quot;&gt;Concluding the Series&lt;/h2&gt;
&lt;p&gt;With that, you&#39;ve confirmed that the domain is working and appropriately configured. You&#39;re now ready to pentest against the domain!&lt;/p&gt;
&lt;p&gt;It&#39;s been a pleasure writing this up, and I hope someone finds it helpful.  If you do, please don&#39;t hesitate to leave me a note at Mastodon.&lt;/p&gt;
</content>
  </entry>
</feed>