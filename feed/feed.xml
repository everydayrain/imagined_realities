<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <title>Imagined Realities</title>
  <subtitle>Cyber Security and Stray Thoughts.</subtitle>
  <link href="https://christopherbauer.org/feed/feed.xml" rel="self" />
  <link href="https://christopherbauer.org/" />
  <updated>2025-03-26T00:00:00Z</updated>
  <id>https://christopherbauer.org/</id>
  <author>
    <name>Christopher Bauer</name>
  </author>
  <entry>
    <title>I&#39;m an Irked Docker Maintainer and Homeprodder</title>
    <link href="https://christopherbauer.org/blog/docker-trouble/" />
    <updated>2025-03-26T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/docker-trouble/</id>
    <content type="html">&lt;p&gt;Pointing folks to tools for more insight into Docker containers.&lt;/p&gt;
&lt;h2 id=&quot;overview-in-brief&quot;&gt;Overview in Brief&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble/#context-homelab-and-homeprod&quot; class=&quot;primary&quot;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble/#gelf-for-graylog-servers&quot; class=&quot;primary&quot;&gt;GELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble/#oxker-for-on-demand-log-viewing&quot; class=&quot;primary&quot;&gt;Oxker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/docker-trouble//#lazyjournal-for-on-demand-log-viewing&quot; class=&quot;primary&quot;&gt;Lazyjournal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;context-homelab-and-homeprod&quot;&gt;Context: Homelab and Homeprod&lt;/h2&gt;
&lt;p&gt;I&#39;ve reached a milestone in the maturity of my homelab where a certain number of services are so integral to my family&#39;s routines as to be indispensable.  Perhaps this reflects maturation from &amp;quot;lab&amp;quot; to &amp;quot;production&amp;quot; that many enthusiasts before me have gone through, but the amount of administrative attention required has had me reconsidering the design of those services in the &lt;em&gt;prod&lt;/em&gt; category.&lt;/p&gt;
&lt;p&gt;Concomitantly, my patience for inscrutable containers or processes that are difficult to manage by hand (looking at you API-only distros like Talos), is very low these days.  Point in case: I recently spun up a K8s cluster and I couldn&#39;t help but admire how cool it is to abstract away the process of making a container multi-node by way of API-orchestration-land.  My awe quickly melted away in the face of complexity and was accompanied by a sense that this technical marvel is not immune &lt;a href=&quot;https://www.wiz.io/blog/ingress-nginx-kubernetes-vulnerabilities&quot; class=&quot;primary&quot;&gt;to the same sorts vulnerabilities&lt;/a&gt;  as any other. Given K8s&#39; complexity, it was probably inevitable that I&#39;d come back around to Docker compose files as the primary source of my bedrock services.&lt;/p&gt;
&lt;p&gt;That said, Docker containers aren&#39;t great.  They&#39;re nice in terms of installing and configuring  services (depending on the documentation), but they are a pain to troubleshoot.  So going deep on Docker has been rocky, and I wanted to share a few insights for looking at logs and general Docker tinkering.&lt;/p&gt;
&lt;h2 id=&quot;quick-and-dirty-troubleshooting-of-docker-containers&quot;&gt;Quick and Dirty Troubleshooting of Docker Containers&lt;/h2&gt;
&lt;p&gt;Of course you can always &lt;code&gt;docker exec -it &amp;lt;SOME_CONTAINER_NAME&amp;gt; sh&lt;/code&gt; or &lt;code&gt;docker logs &amp;lt;SOME_CONTAINER_NAME&amp;gt;&lt;/code&gt; if you need to troubleshoot a service.&lt;/p&gt;
&lt;p&gt;I don&#39;t find these methods terribly adroit in headless ecosystems.  Moreover, looking at raw log entries in single space on the CLI is, for me, a fast road to missing critical information.  I do that enough when hacking, I don&#39;t want more of it at home.  I&#39;d like to have some colorized, formatted output please.&lt;/p&gt;
&lt;h2 id=&quot;gelf-for-graylog-servers&quot;&gt;GELF for Graylog Servers&lt;/h2&gt;
&lt;p&gt;In &amp;quot;today-I-learned&amp;quot; news, Docker has native support for the &lt;a href=&quot;https://docs.docker.com/engine/logging/drivers/gelf/&quot; class=&quot;primary&quot;&gt;Graylog Extended Formate (GELF)&lt;/a&gt;  logging format.  If you run Graylog, you can easily ingest Docker logs with the simple addition of a few lines to docker-compose files.  Since compose files are in that ever readable &lt;em&gt;yaml&lt;/em&gt; format, this amounts to little more than adding the following block, say after the &amp;quot;restart: always&amp;quot; line.  Yaml is sensitive to spacing, so make sure the &amp;quot;logging&amp;quot; text lines up with the previous entry&#39;s indentation.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gelf&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;gelf-address&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;udp://&amp;lt;YOUR_LOGGING_SERVER_IP:PORT&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;SOME_TAG&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;oxker-for-on-demand-log-viewing&quot;&gt;Oxker for On-Demand Log Viewing&lt;/h2&gt;
&lt;p&gt;As an alternative, I ran across &lt;a href=&quot;https://github.com/mrjackwills/oxker&quot; class=&quot;primary&quot;&gt;Oxker&lt;/a&gt; , a &amp;quot;simple TUI to view and control docker containers.&amp;quot;  Oxker is run itself as a docker container.  If you are at all familiar with &lt;a href=&quot;https://github.com/jesseduffield/lazygit&quot; class=&quot;primary&quot;&gt;LazyGit&lt;/a&gt;  then Oxker&#39;s TUI interface will be intuitive.  Oxker shares a lot in common with the more widely known tool, &lt;a href=&quot;https://github.com/jesseduffield/lazydocker&quot; class=&quot;primary&quot;&gt;LazyDocker&lt;/a&gt;  but in my tests LazyDocker was both ineffective in exposing logs on my machine and offered superfluous information (to me) regarding volumes and images.  Perhaps the former issue was an omitted parameter on my part, but since a log-first tool was what I was after as a matter of priority, I wasn&#39;t prepared to tinker and moved on quickly to Oxker.  It&#39;s a straightforward tool offering logs and some controls over containers.  The logs themselves are still single space and not colorized, but it is nice to see the layout orchestrated with cpu and memory stats this way.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2025-03-26_12-30.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I favor running Oxker on the docker command line rather than as a compose file as I tend to use it ad-hoc rather than as a perpetual service and I don&#39;t store any data or configurations long-term.  The last parameter is if you&#39;d like to have the log entries appear with the local timestamp instead of GMT.&lt;/p&gt;
&lt;pre class=&quot;language-cli&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cli&quot;&gt;docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock:ro --pull=always mrjackwills/oxker --timezone &lt;YOUR_TIMEZONE&gt;&lt;/YOUR_TIMEZONE&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;lazyjournal-for-on-demand-log-viewing&quot;&gt;Lazyjournal for On-Demand Log Viewing&lt;/h2&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2025-03-26_13-54.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
I saved the one with the most potential to fill my toolkit for last. &lt;a href=&quot;https://github.com/Lifailon/lazyjournal&quot; class=&quot;primary&quot;&gt;Lazyjournal&lt;/a&gt;  is well-known but new to me. Like Oxker it offers a Lazygit-style readout. This is a viewing TUI-based tool, it doesn&#39;t manipulate containers or give you system stats like Oxker above. While it is primarily pointed at journalctl entries, it also works with containers. The maintainers favor a download method of using a go binary with links to your path for Linux instances. I find Lazyjournal&#39;s interface a bit busy, especially when I&#39;m only after containers and have to shift through journalctl entries and syslog stuff.  However, I really like the formatted and colorized logs it offers and the filter is fast and a nice alternative to grepping through journalctl entries.
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well, I&#39;ve been using Oxker a lot lately, I think because of ease of getting to the logs.  As I said above, I am starting to use Lazyjournal a bit more, as I like how it aids in sifting through what can be a container&#39;s idiosyncratic log report information (its like you have to learn a new tech stack with each new container).  I hope this quick survey of tools to reveal Docker logs has been useful.  Should you want to connect, feel free reach out on &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon&lt;/a&gt; .&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Migrating Posts from Jekyll to 11ty with Python</title>
    <link href="https://christopherbauer.org/blog/migrating_jekyll/" />
    <updated>2025-02-12T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/migrating_jekyll/</id>
    <content type="html">&lt;h4 id=&quot;overview-in-brief&quot;&gt;Overview in Brief&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#rationale-for-switching&quot; class=&quot;primary&quot;&gt;Rationale for Switching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#migrating-jekyll-posts&quot; class=&quot;primary&quot;&gt;Migrating Jekyll Posts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#removing-the-layout-property&quot; class=&quot;primary&quot;&gt;Removing the Layout Property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#rewriting-image-links&quot; class=&quot;primary&quot;&gt;Rewriting Image Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/migrating_jekyll/#rewriting-self-referring-links&quot; class=&quot;primary&quot;&gt;Rewriting Self-Referring Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rationale-for-switching&quot;&gt;Rationale for Switching&lt;/h3&gt;
&lt;p&gt;I recently recreated my website using 11ty and ran into a few challenges transitioning my posts from Jekyll. Before I dig into how I solved them, allow me to recap my reasons for switching.&lt;/p&gt;
&lt;p&gt;I&#39;d used Jekyll since 2020 and while there was a learning curve, Jekyll treated me well for the most part. My realization that I needed to make a change came when I recently upgraded my home machine. I had to install backports on Debian to obtain a load of outdated software and dependencies to just to recreate the simple local Jekyll build flow. That the primary task of a static site generator required so much that wasn&#39;t well maintained anymore was a sign that was hard to miss.&lt;/p&gt;
&lt;p&gt;There were other ongoing issues as well. I never got ruby. I&#39;m not throwing shade, I just never ran into ruby all that much outside of Jekyll. Then, when I started experimenting with 11ty, it&#39;s static site generator used npm with which I am a bit more familiar.  At that point I was sold and ready to make my first steps toward migration.&lt;/p&gt;
&lt;h3 id=&quot;migrating-jekyll-posts&quot;&gt;Migrating Jekyll Posts&lt;/h3&gt;
&lt;p&gt;One challenge with the migration was the layout property in the frontmatter of my Jekyll formatted posts. My new 11ty theme didn&#39;t require a layout property and the engine was utterly confused by it at build, so it had to come out. I didn&#39;t want to do that manually for two dozen back-posts.&lt;/p&gt;
&lt;p&gt;The second challenge seemed more formidable but turned out to be a regex problem. I&#39;d been using a markdown links style of referencing local image locations. For example: &lt;code&gt;![Alt text](URL or file path)&lt;/code&gt;. My new 11ty theme used a Nunjucks shortcode style (e.g. in squiggly brackets something like: % &amp;quot;image caption&amp;quot;, &amp;quot;image link&amp;quot; %). Jekyll did offer the ability to use shortcodes in Liquid, though I always found it easier to use the markdown style. So my posts were littered with the markdown syntax. Another issue I didn&#39;t want to deal with manually for my back-posts.&lt;/p&gt;
&lt;p&gt;Then there was the third problem of the format of self-referring links. Links embedded in my markdown text pointing to my own blog had a date format using forward slashes (e.g. year/month/day). The theme I&#39;m using for 11ty paginates the blog posts using dashes (e.g. year-month-day). In other words, all the links on my blog pointing to my own blog posts were broken. So I would have to alter those to ensure the links referred to posts that actually exist by changing the date format while leaving the rest of the link intact.&lt;/p&gt;
&lt;p&gt;Rather than address my two dozen back-posts manually, these issues seemed like python&#39;s bread and butter. I wrote up some python scripts that I&#39;m posting here as a model for others in a similar situation. Bear in mind that I&#39;m self-taught in Python, so if they appear inelegant, or I use inappropriate code, please feel free to offer suggestions by DMing me at my &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon account&lt;/a&gt; . The scripts appear here separately as I assume readers will not uniformly have the same requirements as I do and might wish to select them individually.&lt;/p&gt;
&lt;p&gt;I used these scripts on Debian Linux with Python3.11 and markdown files for the blog posts. I strongly recommend you make copies of the markdown files you intend to run these on before for testing to ensure that they do what you expect.&lt;/p&gt;
&lt;h3 id=&quot;removing-the-layout-property&quot;&gt;Removing the Layout Property&lt;/h3&gt;
&lt;p&gt;First I imported the path module from pathlib in order to point the commands to a properly formatted directory location.&lt;/p&gt;
&lt;p&gt;Then I set the source directory as a variable. I followed that with a glob search to identify the files in the source directory and to set them to a variable called &amp;quot;files.&amp;quot;&lt;/p&gt;
&lt;p&gt;Next, I created a try and except structure to resolve errors gracefully.&lt;/p&gt;
&lt;p&gt;I then started the proper iteration with a for statement to loop over the files variable. For each file in the loop I next instructed python to open the file as &lt;em&gt;read&lt;/em&gt;, and store that text as a variable &amp;quot;lines.&amp;quot;&lt;/p&gt;
&lt;p&gt;Once python had stored the text as lines, I coded another open method, this time as &lt;em&gt;write&lt;/em&gt; for each file in the loop. Next, I created a nested loop to iterate over the stored text in the &amp;quot;lines&amp;quot; variable. The nested loop had a conditional method to remove any line in the stored text that matched the layout frontmatter property and its newline character. If that condition was met the code then wrote this &amp;quot;new&amp;quot; textual arrangement to the stored text in the &amp;quot;lines&amp;quot; variable. And with that I&#39;d erased the frontmatter layout property in two dozen posts.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/bin/python3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Import modules&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Path

&lt;span class=&quot;token comment&quot;&gt;# Set the source directory and find all the files within it.&lt;/span&gt;
src_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/home/directory/of/your/blog/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; src_dir&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;glob&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;## Find the frontmatter category &quot;layout&quot; and delete it.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; search &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; fileread&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      lines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fileread&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;readlines&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; filewrite&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; lines&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

          &lt;span class=&quot;token comment&quot;&gt;# strip() is used to remove &#39;&#92;n&#39;&lt;/span&gt;
          &lt;span class=&quot;token comment&quot;&gt;# present at the end of each line&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strip&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;layout: post&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            filewrite&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Oops! Something went wrong.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rewriting-image-links&quot;&gt;Rewriting Image Links&lt;/h3&gt;
&lt;p&gt;To translate the markdown image format to Nunjucks shortcode I used the same search using a glob pattern but made it into a simple function to handle the source directory as a parameter. However to identify and change the text, I deviated and used a regex search/substitute method. The hardest part was fine-tuning the regex to capture the entirety of the markdown link. I learned that the regex substitution can accept regex groups, and that turned out to be pretty handy.&lt;/p&gt;
&lt;p&gt;I started by importing the re module for regex and the Path module.&lt;/p&gt;
&lt;p&gt;Like above, I set the working directory to a variable.&lt;/p&gt;
&lt;p&gt;I then created a function, &amp;quot;find_images&amp;quot; that accepted a parameter. First the function would create a variable to store all the files of the source directory.&lt;/p&gt;
&lt;p&gt;Next I wrote the iteration process on the files by opening each file as &lt;em&gt;read and write&lt;/em&gt;, and storing that text as a variable &amp;quot;md.&amp;quot; Then for the variable &amp;quot;md&amp;quot; I ran a substitute regex. The regex looked for the markdown syntax and a few different extensions and created a few groups. It&#39;d then replace the markdown syntax and using the groups and preserve the image file name within the new Nunjucks syntax. The function then sought out the beginning of the text and wrote the changed text structure to each file.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/bin/python3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Import modules&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Path

&lt;span class=&quot;token comment&quot;&gt;# Set target directory&lt;/span&gt;
src_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home/directory/of/your/blog/&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;find_images&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;glob&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      md &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      md &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;!&#92;[.*?&#92;]&#92;(&#92;/assets&#92;/img&#92;/(.*&#92;.png|.*&#92;.JPG|.*&#92;.jpg)&#92;)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;&amp;lt;div class=&quot;&lt;/span&gt;grid&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&amp;lt;div&gt;&amp;lt;img src=&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;img&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;g&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; loading=&quot;&lt;/span&gt;lazy&lt;span class=&quot;token string&quot;&gt;&quot; title=&quot;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;&amp;lt;/div&gt;&amp;lt;div&gt;&amp;lt;/div&gt;&amp;lt;/div&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        md&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seek&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;md&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Text replaced&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


find_images&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;src_dir&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;rewriting-self-referring-links&quot;&gt;Rewriting Self-Referring Links&lt;/h3&gt;
&lt;p&gt;This script is virtually the same as the one above, it just uses a different regex to isolate links referring to https://christopherbauer.org and substitute the date format from forward slashes to dashes using groups. It has different variable names for the loops as well.&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/bin/python3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Import modules&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; re
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; pathlib &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Path

&lt;span class=&quot;token comment&quot;&gt;# Set target directory&lt;/span&gt;
src_dir &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/home/directory/of/your/blog/&quot;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;find_images&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  files &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Path&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;file_variable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;glob&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; filename &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; files&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;r+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      link &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sub&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;https&#92;:&#92;/&#92;/christopherbauer&#92;.org&#92;/(&#92;d{4})&#92;/(&#92;d{2})&#92;/(&#92;d{2})&#92;/(&#92;w.*)&#92;.html&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;r&quot;https://christopherbauer.org/blog/&#92;1-&#92;2-&#92;3-&#92;4&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        link&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seek&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      blogpost&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;write&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Text replaced&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;


find_images&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;src_dir&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I bet that these scripts won&#39;t be immediately useful to everyone transitioning from Jekyll to 11ty, given the idiosyncrasies of constructing static websites. Even websites with popular generators such as Jekyll vary quite a bit given theming and other custom configurations going on under the hood. Nevertheless, I hope these scripts will be useful.  Even if readers don&#39;t use them line for line, they can serve as inspiration for other bloggers to modify their posts and ease the transition process.&lt;/p&gt;
&lt;p&gt;Happy blogging!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Graylog on Proxmox with Ansible for Rsyslog Client Config</title>
    <link href="https://christopherbauer.org/blog/graylog-revised/" />
    <updated>2025-01-24T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/graylog-revised/</id>
    <content type="html">&lt;p&gt;Content Overview&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#introduction&quot; class=&quot;primary&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#creating-the-vm&quot; class=&quot;primary&quot;&gt;Creating the VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#installation-and-configuration&quot; class=&quot;primary&quot;&gt;Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://christopherbauer.org/blog/graylog-revised/#automating-client-rsyslog-configurations-with-ansible&quot; class=&quot;primary&quot;&gt;Automating Client Rsyslog Configurations with Ansible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;After some thought, I realized installing Graylog is sufficiently complicated that I&#39;m revising my original post to include installation steps.&lt;/p&gt;
&lt;p&gt;In this post I first outline two obstacles to be aware of in creating a VM on Proxmox for Graylog. I then cover the installation steps for OpenSearch, MongoDB and Graylog. In the final part, I offer an overview of how you can use Ansible to configure clients to send Graylog logs using rsyslog.&lt;/p&gt;
&lt;h4 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h4&gt;
&lt;p&gt;The approach of this post assumes the reader is comfortable with the Linux command line and desires to install the Graylog Open version on a Proxmox Ubuntu 22.04 virtual machine, and wants to install OpenSearch on the self-same machine as Graylog. These instructions don&#39;t consider use of a proxy or TLS requirements.&lt;/p&gt;
&lt;p&gt;One note of warning: be prepared for Graylog&#39;s RAM consumption. Graylog is a RAM hog. You&#39;ll see your RAM usage shoot up so it&#39;d pay to go into this project with your eyes open.&lt;/p&gt;
&lt;h3 id=&quot;creating-the-vm&quot;&gt;Creating the VM&lt;/h3&gt;
&lt;p&gt;I&#39;m going to cover two notes on how to make an install of Graylog on a Proxmox VM go more smoothly. If I&#39;d known about these challenges ahead of time I could have saved myself a little pain.&lt;/p&gt;
&lt;h4 id=&quot;in-brief&quot;&gt;In Brief&lt;/h4&gt;
&lt;p&gt;Stick with Ubuntu 22.04 and select &amp;quot;Host&amp;quot; as the CPU for the VM creation parameters.&lt;/p&gt;
&lt;h4 id=&quot;in-detail&quot;&gt;In Detail&lt;/h4&gt;
&lt;p&gt;I went with a VM because Graylog is a bit of a beast, requiring multiple different components and lots of RAM. I believe people have installed it on LXC containers, but I figured I&#39;d run into fewer problems this way. Well, at least fewer problems than I would otherwise. Not absent problems.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; issue was relatively trivial but time consuming to figure out. I figured I&#39;d put Graylog on the latest Ubuntu LTS (24.04). It took a full install cycle using the &lt;a href=&quot;https://wiki.ubuntu.com/Installer/FAQ&quot;&gt;Ubuntu Debian-Installer&lt;/a&gt; and troubleshooting to realize that MongoDB wouldn&#39;t play nice with that version. MongoDB is required for Graylog&#39;s function so this wasn&#39;t something I could figure out later. Lesson learned. As of this writing, I used 22.04.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;second&lt;/strong&gt; was that MongoDB&lt;a href=&quot;https://forum.proxmox.com/threads/mongo-db-5-0-not-install.95857/post-440005&quot;&gt; doesn&#39;t play nice with Proxmox&#39;s defaults&lt;/a&gt;. I had learned and subsequently forgotten this one from a previous encounter with MongoDB. In particular, I had to tweak an option that I otherwise never change regarding the processor, as MongoDB cannot work on the default selection of x86-64-v2-AES. In the VM creation guide, on the CPU tab, for &amp;quot;Type,&amp;quot; I had to set the processor to &lt;em&gt;host&lt;/em&gt; in order for it to function correctly in the VM.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2025-01-21_11-41.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;installation-and-configuration&quot;&gt;Installation &amp;amp; Configuration&lt;/h3&gt;
&lt;p&gt;Regarding the install process, we&#39;ll work through four stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &amp;amp; configure OpenSearch to store the log entries that Graylog collects&lt;/li&gt;
&lt;li&gt;Install MongoDB to store Graylog&#39;s metadata&lt;/li&gt;
&lt;li&gt;Install the Graylog Data Node&lt;/li&gt;
&lt;li&gt;Install the Graylog server&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;installing-opensearch&quot;&gt;Installing OpenSearch&lt;/h4&gt;
&lt;p&gt;I&#39;m borrowing from &lt;a href=&quot;https://github.com/Graylog2/se-poc-docs/blob/main/src/On%20Prem%20POC/installing%20opensearch.md&quot;&gt;this Graylog repo&#39;s instructions&lt;/a&gt; on installing OpenSearch.&lt;/p&gt;
&lt;p&gt;First, update and upgrade the VM. Restart if required.&lt;/p&gt;
&lt;p&gt;Take note of the IP address (if you need to, run &lt;code&gt;ip a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Verify the required dependencies are met.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; lsb-release ca-certificates &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; gnupg2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download signing key.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -o- https://artifacts.opensearch.org/publickeys/opensearch.pgp &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; gpg &lt;span class=&quot;token parameter variable&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--batch&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--yes&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/opensearch-keyring&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create repository file.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;deb [signed-by=/usr/share/keyrings/opensearch-keyring] https://artifacts.opensearch.org/releases/bundle/opensearch/2.x/apt stable main&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/opensearch-2.x.list&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install OpenSearch.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set a temporary password for installation.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;OPENSEARCH_INITIAL_ADMIN_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-dc&lt;/span&gt; A-Z-a-z-0-9_@&lt;span class=&quot;token comment&quot;&gt;#%^-_=+ &amp;lt; /dev/urandom  | head -c${1:-32}&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;opensearch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2.15&lt;/span&gt;.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set default value for heap variable.&lt;/p&gt;
&lt;pre class=&quot;language-Bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-Bash&quot;&gt;tmpheap=1&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;configuring-opensearch&quot;&gt;Configuring OpenSearch&lt;/h4&gt;
&lt;p&gt;Back up the original OpenSearch configuration.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; /etc/opensearch/opensearch.yml /etc/opensearch/opensearch.yml.bak&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create the new configuration with parameters set to Graylog&#39;s requirements.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cluster.name: graylog
node.name: &lt;span class=&quot;token variable&quot;&gt;${&lt;span class=&quot;token environment constant&quot;&gt;HOSTNAME&lt;/span&gt;}&lt;/span&gt;
path.data: /var/lib/opensearch
path.logs: /var/log/opensearch
transport.host: 0.0.0.0
network.host: 0.0.0.0
http.port: 9200
discovery.type: single-node
action.auto_create_index: false
plugins.security.disabled: true
indices.query.bool.max_clause_count: 32768&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tee&lt;/span&gt; /etc/opensearch/opensearch.yml&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;installing-mongodb&quot;&gt;Installing MongoDB&lt;/h4&gt;
&lt;p&gt;Once I &lt;a href=&quot;http://christopherbauer.org/blog/graylog-revised/#creating-the-vm&quot; class=&quot;primary&quot;&gt;configured the vm properly&lt;/a&gt; , I followed &lt;a href=&quot;https://go2docs.graylog.org/current/downloading_and_installing_graylog/ubuntu_installation.htm#aanchor21&quot;&gt;the official docs &lt;/a&gt; for an Ubuntu install without problems. Those same instructions appear here.&lt;/p&gt;
&lt;p&gt;Set a timezone.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; timedatectl set-timezone UTC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install gnupg.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gnupg &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Import the key for MongoDB.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-fsSL&lt;/span&gt; https://www.mongodb.org/static/pgp/server-6.0.asc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; gpg &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/mongodb-server-6.0.gpg &lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;
   &lt;span class=&quot;token parameter variable&quot;&gt;--dearmor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a list file for MongoDB.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tee&lt;/span&gt; /etc/apt/sources.list.d/mongodb-org-6.0.list&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload the local package database.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the latest stable version of MongoDB.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; mongodb-org&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&#39;t use proxies, so if you do refer to &lt;a href=&quot;https://go2docs.graylog.org/current/downloading_and_installing_graylog/ubuntu_installation.htm#aanchor21&quot;&gt;the official docs &lt;/a&gt;, then Enable.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl daemon-reload&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; mongod.service&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl restart mongod.service&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token parameter variable&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;service &lt;span class=&quot;token parameter variable&quot;&gt;--state&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;active &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; mongod&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Freeze the MongoDB version.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; apt-mark hold mongodb-org&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;installing-the-graylog-data-node&quot;&gt;Installing the Graylog Data Node&lt;/h4&gt;
&lt;p&gt;Get the Graylog repo as a package.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; https://packages.graylog2.org/repo/packages/graylog-6.1-repository_latest.deb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install it.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; dpkg &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; graylog-6.1-repository_latest.deb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The repositiories your package manager checks should now include Graylog&#39;s repos. Update them.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install Graylog.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; graylog-datanode&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;configuring-the-graylog-data-node&quot;&gt;Configuring the Graylog Data Node&lt;/h4&gt;
&lt;p&gt;To conform to the OpenSearch requirements check the vm.max count to ensure it is set to at least 26144.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /proc/sys/vm/max_map_count&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it isn&#39;t, you can use the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;vm.max_map_count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;262144&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reload the config.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sysctl&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a password secret and copy the output to a file editor.  You&#39;ll need it for the next step and later as well.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; /dev/urandom &lt;span class=&quot;token function&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-dc&lt;/span&gt; A-Z-a-z-0-9 &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; -c&lt;span class=&quot;token variable&quot;&gt;${1&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;96}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open the config file using vim (you can use nano if you prefer something straighforward). Paste the above into the &lt;code&gt;password_secret&lt;/code&gt; line, no quotations.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; /etc/graylog/datanode/datanode.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable the Graylog service.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; graylog-datanode.service&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensure it has started.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl start graylog-datanode&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;install-graylog-server&quot;&gt;Install Graylog Server&lt;/h4&gt;
&lt;p&gt;Install the Graylog server.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; graylog-server&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;configure-the-graylog-server&quot;&gt;Configure the Graylog Server&lt;/h4&gt;
&lt;p&gt;Generate a password and copy it before opening the config file in the next step.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Enter Password: &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;/dev/stdin &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;n&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; sha256sum &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cut&lt;/span&gt; -d&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-f1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add your password secret generated during the Graylog Node configuration step to the server config file with the line &lt;code&gt;password_secret&lt;/code&gt;. Then add the password you generated above to the line &lt;code&gt;root_password_sha2&lt;/code&gt;. Select an alternative username for &lt;code&gt;root_username&lt;/code&gt; if you desire.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; /etc/graylog/server/server.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set the &lt;code&gt;http_bind_address&lt;/code&gt; value in the Graylog configuration file to the public host name or a public IP address for the machine to which you can connect.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;s/#http_bind_address = 127.0.0.1.*/http_bind_address = 0.0.0.0:9000/g&#39;&lt;/span&gt; /etc/graylog/server/server.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable Graylog during the operating system’s startup.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl daemon-reloadsudo systemctl &lt;span class=&quot;token builtin class-name&quot;&gt;enable&lt;/span&gt; graylog-server.servicesudo systemctl start graylog-server.servicesudo systemctl &lt;span class=&quot;token parameter variable&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;service &lt;span class=&quot;token parameter variable&quot;&gt;--state&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;active &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; graylog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that you should be able to proceed to IP assigned to your VM with the port 9000 and find the login page (e.g. http:// 192.168.0.1:9000).&lt;/p&gt;
&lt;h3 id=&quot;automating-client-rsyslog-configurations-with-ansible&quot;&gt;Automating Client Rsyslog Configurations with Ansible&lt;/h3&gt;
&lt;p&gt;Take what follows as a rough model rather than specific directions.&lt;/p&gt;
&lt;p&gt;Next, there was the matter of configuring my machines &lt;a href=&quot;https://go2docs.graylog.org/current/getting_in_log_data/syslog_inputs.html&quot;&gt;to send logs to Graylog&lt;/a&gt;. Graylog offers a &lt;a href=&quot;https://go2docs.graylog.org/current/getting_in_log_data/inputs.htm&quot;&gt;variety of different ways&lt;/a&gt; to accept logs from client machines. I went with Rsyslog.&lt;/p&gt;
&lt;p&gt;Now, I could have ssh-ed into each individual machine and altered the &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; file by hand to include:&lt;/p&gt;
&lt;pre class=&quot;language-vim&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-vim&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;@@yourgraylog&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;example&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;org&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;514&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;RSYSLOG_SyslogProtocol23Format&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, from the start this task seemed ripe for automation.&lt;/p&gt;
&lt;p&gt;I built an Ansible script to ensure rsyslog was installed and then to configure it on the clients. I&#39;d been playing around with Ansible over the weekend, and the YAML format is great compared to writing everything out in pure python.&lt;/p&gt;
&lt;p&gt;Be aware, while the Ansible code can be found below, there are a bunch of configuration challenges to Ansible that can sidetrack you for hours. I can think of at least two off the top of my head. First, I used the code below as an &lt;a href=&quot;https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html&quot;&gt;Ansible Role&lt;/a&gt;. Covering what that means, and how to setup Ansible, is far beyond the scope of this article. If you&#39;re new to it, plan some free hours to start toying around. Start with &lt;a href=&quot;https://docs.ansible.com/ansible/latest/getting_started/index.html&quot;&gt;the docs&lt;/a&gt;; they&#39;re just average but they&#39;re worth it for just getting started. Second, if you use &lt;em&gt;sudo&lt;/em&gt; with a password on the target, you&#39;ll want to use Ansible-Vault. However, the whole way Ansible Vault works is super unclear to me. I hope to write up a blog post about it sometime. I&#39;m afraid I don&#39;t have a confirmed solution for it as of this writing. Also, I can&#39;t help if you are thinking of windows hosts, I don&#39;t have windows clients.&lt;/p&gt;
&lt;p&gt;Because this is a role &lt;em&gt;main.yml&lt;/em&gt; file, it may seem truncated. To explain, the first section determines whether rsyslog is installed. The second determines whether the Graylog code for forwarding the logs is already present in the &lt;code&gt;/etc/rsyslog.conf&lt;/code&gt; file, and if not, adds it to the final line. The final section then restarts the rsyslog server.&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install rsyslog
  &lt;span class=&quot;token key atrule&quot;&gt;ansible.builtin.apt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rsyslog

&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Add instruction to dispatch logs to graylog
  &lt;span class=&quot;token key atrule&quot;&gt;ansible.builtin.lineinfile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /etc/rsyslog.conf
    &lt;span class=&quot;token key atrule&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*.*@@YOUR_IP_HERE;RSYSLOG_SyslogProtocol23Format&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;*.&#92;*@@YOUR_IP_HERE;RSYSLOG_SyslogProtocol23Format&#39;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; present
    &lt;span class=&quot;token key atrule&quot;&gt;insertafter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; EOF
    &lt;span class=&quot;token key atrule&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Restart rsyslog
  &lt;span class=&quot;token key atrule&quot;&gt;ansible.builtin.shell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; systemctl restart rsyslog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;d then run that using Ansible as a role in your playbook.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Admittedly, this is a post with a niche attraction, but nevertheless I hope it may help someone in the future. Should you have any questions, don&#39;t hesitate to DM me on &lt;a href=&quot;https://infosec.exchange/@anthro_packets&quot; class=&quot;primary&quot;&gt;Mastodon&lt;/a&gt; .&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Installing VSFTP in a Proxmox LXC Container Or: &quot;How I Learned the Lessons of the SysAdmin&quot;</title>
    <link href="https://christopherbauer.org/blog/2025-01-07-vsftpd/" />
    <updated>2025-01-07T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/2025-01-07-vsftpd/</id>
    <content type="html">&lt;p&gt;To make a long story short, I don&#39;t want my NAS to be multipurpose for reasons of admin. I only want it to be a backup server, nothing more. So I thought I&#39;d write up a quick primer on installing and configuring VSFTP in a Proxmox LXC container.&lt;/p&gt;
&lt;h3 id=&quot;a-progression-to-the-sysadmin-perspective&quot;&gt;A Progression to the SysAdmin Perspective&lt;/h3&gt;
&lt;p&gt;I don&#39;t think I have more services running than the next home-labatista on the block, but I do have an above average awareness of security and so I&#39;m assiduous about ensuring services are installed correctly, hardened, and everything from OS to apps are upgraded. That means that as the number of services I run grows, I find I&#39;m spending lots of time on admin. It&#39;s not that I don&#39;t like doing admin, its that I don&#39;t like doing lots of admin while being inefficient amidst growing workflows. As the VM and container workflows have multiplied, I&#39;ve looked to simplify things. While I&#39;m sure automation might help me here, I&#39;m seeking simplicity of a mental sort to start.&lt;/p&gt;
&lt;p&gt;After listening to &lt;a href=&quot;https://2.5admins.com/2-5-admins-178/&quot;&gt;2.5 Admins # 178&lt;/a&gt;, I&#39;ve taken the principle of having critical services running on dedicated hardware and extended it another step. I want non-hypervisor hardware, especially hardware running uncommon OSes such as Synology&#39;s Disk Station Manager, to be dedicated to only one service as a rule. If the appliance is designed as a network attached storage device, then let it be a backup server only. Running a slew of Docker containers across a Proxmox host, a Raspberry Pi and who knows what else is too taxing from a management standpoint. That is what Proxmox is for; let the Raspberry Pi run a Meshtastic node alone.&lt;/p&gt;
&lt;p&gt;I can see that I&#39;m privileged to have a NAS appliance and a separate hypervisor, allowing me to separate a backup server from, say, a media server, instead of using the NAS to simultaneously provide multiple services itself. All the same, at a cognitive level, I find it easier to manage many home-lab services when they are segregated according to hardware. Proxmox with its ease of management and easy backups can then handle the multipurpose role.&lt;/p&gt;
&lt;p&gt;Perhaps this is the journey all professional SysAdmins go through, from disorganization and shabby practices when they have a lone VM to keep up, to anticipation, planning, and automation when they manage a small fleet. Okay, yeah, maybe that is just me.&lt;/p&gt;
&lt;h3 id=&quot;why-ftp&quot;&gt;Why FTP?&lt;/h3&gt;
&lt;p&gt;In part, curiosity.  While working on my OSCP cert, it got to the point were I&#39;d groan anytime I fired up nmap and got a result with &amp;quot;vsftp&amp;quot; in the output.  It was almost never vulnerable.  And exploiting web vulnerabilities through exposed FTP shares came to be a tried and true path for initial webshell foothold.&lt;/p&gt;
&lt;p&gt;It&#39;s also partly a workflow preference.  I have PDF Expert on my Ipad, and FTPS has been the only consistently stable protocol I can use to connect to a file server where my PDFs are located.  I tried SMB for a spell, but my IOS seems to hate that protocol and regularly drops the connection. The only work around I could find was to refresh the connection by manually opening the remote share in the file browser.  FTPS by contrast has been hassel-free, so I&#39;m sticking with it for PDF reading on the tablet.&lt;/p&gt;
&lt;p&gt;Of course, I could just use SFTP and skip the work of setting up a dedicated FTP server, but then I wouldn&#39;t learn anything.  So, I installed Very Secure File Transfer Protocol Daemon (&lt;a href=&quot;https://security.appspot.com/vsftpd.html&quot;&gt;vsftpd&lt;/a&gt;) to handle file transfers on my LAN, and let my NAS be just about backups.&lt;/p&gt;
&lt;h3 id=&quot;lxc-container-creation&quot;&gt;LXC Container Creation&lt;/h3&gt;
&lt;p&gt;To be forthright, the &lt;a href=&quot;https://wiki.archlinux.org/title/Very_Secure_FTP_Daemon&quot;&gt;Arch Wiki&lt;/a&gt; on vsftpd is concise and accurate if you need another reference. Credit where credit is due, I used that wiki, as well as the &lt;a href=&quot;https://wiki.debian.org/vsftpd&quot;&gt;Debian wiki&lt;/a&gt; and &lt;a href=&quot;https://help.ubuntu.com/community/vsftpd&quot;&gt;Ubuntu community page on vsftpd&lt;/a&gt; for the steps below.&lt;/p&gt;
&lt;p&gt;First, &lt;a href=&quot;https://pve.proxmox.com/wiki/Linux_Container&quot;&gt;create&lt;/a&gt; an LXC container. This should be straightforward, and it&#39;s out of scope to cover the steps to inception here. Broadly speaking, I prefer using Ubuntu LTS container templates so I don&#39;t get caught out in a year or two when some breaking change requires that I upgrade the distro before I can upgrade the software.&lt;/p&gt;
&lt;p&gt;I prefer SSH keys for admin, so that first tab is a place where I tend to create and add a public key. Regarding memory and CPU, I erred on the lower side of things, with 1 core, 2048 RAM and default storage. I didn&#39;t put this particular LXC on a VLAN, though if you&#39;ve already set up a VLAN bridge in Proxmox corresponding to your router&#39;s VLAN, then it is as simple as adding the VLAN tag in the networking tab.&lt;/p&gt;
&lt;h3 id=&quot;install-and-config-of-vsftpd&quot;&gt;Install &amp;amp; Config of VSFTPD&lt;/h3&gt;
&lt;p&gt;Installation is the easy part. For Debian or Ubuntu, you need only use &lt;code&gt;apt install vsftp&lt;/code&gt; to install using package manager.&lt;/p&gt;
&lt;p&gt;Before configuring, I changed the hosts file to specify connections only from an RFC 1918 IP address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Allow all connections
vsftpd: ALL
# IP address range
vsftpd: 10.0.0.0/255.255.255.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration of vsftp takes place through a file, &lt;code&gt;/etc/vsftpd.conf&lt;/code&gt;. Below are the options I selected. Your requirements may differ, so please refer to the &lt;a href=&quot;https://wiki.archlinux.org/title/Very_Secure_FTP_Daemon&quot;&gt;Arch Wiki&lt;/a&gt; on vsftpd for derivations.&lt;/p&gt;
&lt;p&gt;This config assumes that you&#39;ve assigned a system user as designated to access FTP, perhaps using &lt;code&gt;adduser SOME_NEW_USERNAME&lt;/code&gt;.  If at any point you can&#39;t find the entries below, simply add them to &lt;code&gt;vsftpd.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Disallow anonymous login:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;anonymous_enable=NO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Allowing uploading:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;write_enable=YES
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chroot users by default, ensuring they can&#39;t access whole file system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chroot_local_user=YES 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;chroot_list_enable=NO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure the user&#39;s home directory has the following permissions in accordance with the chroot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod a-w /home/SOME_NEW_USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;chmod 555 /home
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can create folders under that user that will: be writable for the FTP server.&lt;/p&gt;
&lt;p&gt;Then, set the FTP user&#39;s shell to false:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usermod -s /bin/false SOME_NEW_USERNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to add that false shell to the shells list :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo /bin/false &amp;gt;&amp;gt; /etc/shells
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add TLS by first creating a self-signed cert for FTPS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /etc/ssl/certs
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout vsftpd.pem -out vsftpd.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;chmod 600 vsftpd.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then add the following to &lt;code&gt;/etc/vsftpd.conf&lt;/code&gt; to take advantage of that new certificate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssl_enable=YES

# if you accept anonymous connections, you may want to enable this setting
#allow_anon_ssl=NO

# by default all non anonymous logins and forced to use SSL to send and receive password and data, set to NO to allow non secure connections
force_local_logins_ssl=NO
force_local_data_ssl=NO

# TLS v1 protocol connections are preferred and this mode is enabled by default while SSL v2 and v3 are disabled
# the settings below are the default ones and do not need to be changed unless you specifically need SSL
#ssl_tlsv1=YES
#ssl_sslv2=NO
#ssl_sslv3=NO

# provide the path of your certificate and of your private key
# note that both can be contained in the same file or in different files
rsa_cert_file=/etc/ssl/certs/vsftpd.pem
rsa_private_key_file=/etc/ssl/certs/vsftpd.pem

# this setting is set to YES by default and requires all data connections exhibit session reuse which proves they know the secret of the control channel.
# this is more secure but is not supported by many FTP clients, set to NO for better compatibility
require_ssl_reuse=NO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be it. You can check the status is &lt;em&gt;enabled&lt;/em&gt; and &lt;em&gt;active&lt;/em&gt; by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status vsftpd.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can then confirm by ftp-ing in from another machine (you might have to install first: &lt;code&gt;apt install ftp&lt;/code&gt;). Get the IP address of the vsftp server (&lt;code&gt;ip a&lt;/code&gt;) and try to log in with the system user&#39;s creds:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ftp SOME_VSFTP_SERVER
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For troubleshooting, if you get an error like &amp;quot;500 OOPS: vsftpd: refusing to run with writable root inside chroot(),&amp;quot; then look into the permissions on the home folder of user you set up for access.&lt;/p&gt;
&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap Up&lt;/h3&gt;
&lt;p&gt;There you have it, a very secure FTP server to integrate with all your file reader/clients on the local network. Of course you can set up Tailscale if you&#39;d like to offer it up while away from your LAN, as that would be vastly preferable to opening up ports on your router.&lt;/p&gt;
&lt;p&gt;In any event, I hope this helped, and best of luck in whatever computing journey you find yourself on.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Quick Pointer: Abusing DACL Fumbles using PowerView</title>
    <link href="https://christopherbauer.org/blog/2024-12-12-pv-dacl-mods/" />
    <updated>2024-12-12T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/2024-12-12-pv-dacl-mods/</id>
    <content type="html">&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-12-11_10-09.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ever come across an edge description in Boodhound on DACL abuse? They tend to look something like the above.&lt;/p&gt;
&lt;p&gt;The Windows abuse instructions on the edge tend to offer two ways to proceed, either using &lt;em&gt;net group&lt;/em&gt; from net.exe or PowerView. I&#39;ve always used the net.exe method, but they recommend PowerView because the opsec for net.exe is challenging.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-12-12_08-59.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I was curious to play around with PowerView&#39;s &lt;em&gt;Add-DomainGroupMember&lt;/em&gt; to have another option in my toolbox and find out more about this improved opsec. Unfortunately, I&#39;ve run into this Bloodhound description enough times to know that the steps for the PowerView method aren&#39;t quite as clearly laid out in the Bloodhound description as they could be. I don&#39;t think it&#39;s Bloodhound&#39;s fault, as the &lt;a href=&quot;https://powersploit.readthedocs.io/en/latest/Recon/Add-DomainGroupMember/&quot; class=&quot;primary&quot;&gt;original instructions&lt;/a&gt;  aren&#39;t effusive by any means.&lt;/p&gt;
&lt;h2 id=&quot;adding-an-existing-user-to-domain-admins-by-modifying-the-dacl&quot;&gt;Adding an Existing User to Domain Admins by Modifying the DACL&lt;/h2&gt;
&lt;p&gt;To make it clearer, here are the steps to follow on a compromised domain-joined target. This will add an existing user (for which you have obtained a password), who already has DACL privileges over the Domain Admins group, to the Domain Admins group itself. For the sake of this example, lets say the user credentials we&#39;ve compromised and want to add to Domain Admins is &lt;code&gt;paul.atreides:spicyworm&lt;/code&gt; on a domain with a short name of &lt;em&gt;arrakis&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First, it might pay to ensure you&#39;re authenticated to the Domain Controller as a member of the domain. Set up the creds as variables in Powershell and then use &lt;em&gt;Add-DomainObjectAcl&lt;/em&gt; to authenticate.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$SecPassword = ConvertTo-SecureString &#39;spicyworm&#39; -AsPlainText -Force
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$Cred = New-Object System.Management.Automation.PSCredential(&#39;arrakis&#92;paul.atreides&#39;, $SecPassword)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Add-DomainObjectAcl -Credential $Cred -TargetIdentity &amp;quot;Domain Admins&amp;quot; -PrincipalIdentity paul.atreides -Rights WriteMembers
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;m no PowerShell expert, but you probably don&#39;t need to reenter the following two variables again. I&#39;m doing so for the sake of effectiveness.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$SecPassword = ConvertTo-SecureString &#39;spicyworm&#39; -AsPlainText -Force
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$Cred = New-Object System.Management.Automation.PSCredential(&#39;arrakis&#92;paul.atreides&#39;, $SecPassword)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now add the existing domain user, paul.atreides, who has DACL privileges over Domain Admins group, to the Domain Admins group.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Add-DomainGroupMember -Identity &#39;Domain Adims&#39; -Members &#39;paul.atreides&#39; -Credential $Cred
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can verify whether the operation succeeded.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get-DomainGroupMember -Identity &#39;Domain Admins&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;moving-forward&quot;&gt;Moving Forward&lt;/h2&gt;
&lt;p&gt;If successful, from there your options should open up a bit to lateral movement, or obtaining hashes among other possibilities.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Installing Game of Active Directory on Proxmox: Part 6 - OpenVPN</title>
    <link href="https://christopherbauer.org/blog/2024-11-23-goad-vpn/" />
    <updated>2024-11-23T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/2024-11-23-goad-vpn/</id>
    <content type="html">&lt;p&gt;This is part 6 of my series on &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/tree/main&quot;&gt;Orange Cyberdefense&#39;s&lt;/a&gt; Game of Active Directory (GOAD) on Proxmox VE. In the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-17-goad-ansible&quot;&gt;fifth installment&lt;/a&gt; I covered how to use Ansible to configure the final domain layout and individual Windows VMs. In this post we&#39;ll setup the VPN server on pfSense to simulate an assumed breach.&lt;/p&gt;
&lt;p&gt;As I mentioned before, I&#39;m deeply indebted to Mayfly277&#39;s &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;canonical guide&lt;/a&gt;, and this post follows Mayfly277&#39;s work closely to provide readers with a resource to be used as a standalone or as a supplement.&lt;/p&gt;
&lt;p&gt;Should you need more orientation to the context of this series, or on my rationale for creating it, see &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;first post&lt;/a&gt; in this series.&lt;/p&gt;
&lt;p&gt;Mayfly277&#39;s instructions for this VPN section left me scratching my head at various points. I found two steps where my setup would fail if I followed his instructions on my machine. I&#39;ll make note of those deviations in what follows.&lt;/p&gt;
&lt;h2 id=&quot;pfsense-and-openvpn&quot;&gt;pfSense &amp;amp; OpenVPN&lt;/h2&gt;
&lt;h3 id=&quot;creating-the-ca&quot;&gt;Creating the CA&lt;/h3&gt;
&lt;p&gt;One note before we start, Mayfly277&#39;s &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;guide&lt;/a&gt; has some helpful graphics on his screenshots to draw your eye directly to what needs modifying. Should you get confused about what needs modifying in the following steps, head over there and you should be able to sort it out quickly.&lt;/p&gt;
&lt;p&gt;The first step involves creating a certificate authority to issue a certificate. Go to the system menu and select the Certificates option.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-23_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-23.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Under the Authorities tab click the green Add button at the bottom, and it&#39;ll take to to the following page where you&#39;ll give a descriptive name and a common name. I&#39;ve used VLAN 30 (this is according to my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;unique arrangement&lt;/a&gt;, if you followed Mayfly277&#39;s instructions you&#39;d use 10).&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-24.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Click save and you should have something like this:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-25.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;create-the-certificate-server&quot;&gt;Create the Certificate Server&lt;/h3&gt;
&lt;p&gt;Click the Certificates tab, and click the green Add button at the bottom. That&#39;ll bring up the new certificate page where you&#39;ll add:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a decriptive name&lt;/li&gt;
&lt;li&gt;Select the CA you created&lt;/li&gt;
&lt;li&gt;Set lifetime to 3650&lt;/li&gt;
&lt;li&gt;Add a common name&lt;/li&gt;
&lt;li&gt;Select the server certificate type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then save.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-25_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-27.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-27_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you save the Certificates page will look like this:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-28.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;create-a-vpn-user&quot;&gt;Create a VPN User&lt;/h3&gt;
&lt;p&gt;Now we&#39;ll create a local user who can access the VPN. Go to the System menu and select User Manager.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-28_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Under the Users tab, select the green Add button to create a new user.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-28_2.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Select a username and password, a descriptive name for the user certificate and select the CA you created.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-30.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you hit save the user page will look like this:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-31.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;create-the-open-vpn-service&quot;&gt;Create the Open VPN Service&lt;/h3&gt;
&lt;p&gt;Now we&#39;ll create the service operating on the server. Go to the VPN menu and select OpenVPN.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-31_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Under the Servers tab, click on the Green add button. You&#39;ll make several modifications on this page. The first set are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the description&lt;/li&gt;
&lt;li&gt;Change Server mode to &amp;quot;Remote Access (SSL/TLS + User Auth)&amp;quot;&lt;/li&gt;
&lt;li&gt;Enter &amp;quot;Local Database&amp;quot; into the Backend for authentication field&lt;/li&gt;
&lt;li&gt;Change the local port to 2137&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-32.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modifications continued:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change Peer Certificate Authority to the CA you created&lt;/li&gt;
&lt;li&gt;Change Server certificate to the certificate you created&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-33.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modifications continued:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change IPv4 Tunnel Network to 10.10.10.0/24&lt;/li&gt;
&lt;li&gt;Change IPv4 Local network to 192.168.30.0/24&lt;/li&gt;
&lt;li&gt;Change concurent connections to 10&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-34.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modifications continued:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the network configuration in the Topology dropdown to &amp;quot;net30 -- Isolated /30 network per client&amp;quot;&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-35.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, make sure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS Server Enabled is checked&lt;/li&gt;
&lt;li&gt;DNS server 1 reads 192.168.30.1 (this is according to my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;unique arrangement&lt;/a&gt;, if you followed Mayfly277&#39;s instructions you&#39;d use 10)&lt;/li&gt;
&lt;li&gt;That the Custom options field under Advanced Configruation reads &amp;quot;auth-nocache&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-36.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-36_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;openvpn-client-export-package&quot;&gt;OpenVPN Client Export Package&lt;/h3&gt;
&lt;p&gt;Now we&#39;ll search for and install the OpenVPN package for Client Export that&#39;ll add a new tab to the OpenVPN pages. Go to System and then Package Manager.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-37.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Enter &amp;quot;client-export&amp;quot; into the search term and click the green install button on the entry named &amp;quot;openvpn-client-export.&amp;quot;&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-37_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-37_2.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next click the client export tab.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-38.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;That&#39;ll bring up a new page where we&#39;ll create the VPN certificate for export.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_13-47.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This section of Mayfly277&#39;s guide was not clear on configuring the client export step. When mayfly277 says change the Host Name Resolution to &amp;quot;Other&amp;quot; in the exporting the client certificate step, there is a blurred image. In the context of these posts, where we&#39;re installing GOAD on a bare-metal instance of Proxmox with an existing true LAN, so we&#39;ll use &lt;em&gt;the IP of the Proxmox host&lt;/em&gt; for &amp;quot;Host Name.&amp;quot;&lt;/p&gt;
&lt;p&gt;Once you&#39;ve done that, scoll to the bottom section OpenVPN clients and click under the Export column &amp;quot;Inline Configurations - Most Clients.&amp;quot; Download that certificate to your Kali/attack machine.&lt;/p&gt;
&lt;h3 id=&quot;enable-the-ovpns1-interface&quot;&gt;Enable the ovpns1 Interface&lt;/h3&gt;
&lt;p&gt;At this point there seemed to be something missing from Mayfly277&#39;s instructions. I eventually pieced together that I needed to enable the goadvpn interface with the help of &lt;a href=&quot;https://koller.ninja/proxmox-goad-lab&quot;&gt;this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Head to the Interfaces menu and select assignments. There should now be an entry there called &amp;quot;goadvpn,&amp;quot; click on that blue name/link on the left side. That&#39;ll open up its page and make sure the Enable Interface box is checked, then change the description and click the green Apply Changes box that comes up.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_14-18.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
Your interface assignments will then look something like this:
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_14-18_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You&#39;ll want to enable this interface before you get to the &amp;quot;Configure Firewall&amp;quot; steps.&lt;/p&gt;
&lt;h3 id=&quot;firewall-rules-review&quot;&gt;Firewall Rules Review&lt;/h3&gt;
&lt;p&gt;Honestly, the most challanging part of setting up GOAD was configuring the firewall rules, so take this review of my rules with a grain of salt. These work for me, but they took quite a bit of tinkering. I&#39;m not an expert at firewall rules, so if you spot an error, please let me know by direct messaging me on Mastodon.&lt;/p&gt;
&lt;p&gt;The WAN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_14-03.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The LAN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-23_10-18.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The VLAN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_14-24.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The VPN rules:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-17_14-37.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Post-series edit:&lt;/em&gt; After writing up this series up and exploring on my own, I discovered that VLAN machines couldn&#39;t access the internet.  As a consquence, I couldn&#39;t make them call on my server to download payloads.  I looked into it, and as mentioned in &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/issues/177#issuecomment-1927681503&quot;&gt;this github issue&lt;/a&gt;, I think a rule is missing from the VLAN firewall.  To remedy the problem, I tried a number of targeted rules that essentially reversed the OVPN rule, to no effect. As a short-term workaround, I created an allow any any rule.  My VLAN rules are now kind of a mess, see below.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-12-04_13-38.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;confirming-vpn-access-to-the-domain&quot;&gt;Confirming VPN Access to the Domain&lt;/h2&gt;
&lt;p&gt;Now use &lt;code&gt;sudo openvpn &amp;lt;YOUR_CERTIFICATE&amp;gt;&lt;/code&gt; to connect, and it&#39;ll prompt you for the user and password you created. Once you do that, it should connect successfully.&lt;/p&gt;
&lt;p&gt;To confirm you can reach the VLAN from your attacking machine, use NetExec to do a simple SMB sweep without a domain:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nxc smb 192.168.&amp;lt;YOUR_VLAN&amp;gt;.&amp;lt;HERE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-23_10-09.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;concluding-the-series&quot;&gt;Concluding the Series&lt;/h2&gt;
&lt;p&gt;With that, you&#39;ve confirmed that the domain is working and appropriately configured. You&#39;re now ready to pentest against the domain!&lt;/p&gt;
&lt;p&gt;It&#39;s been a pleasure writing this up, and I hope someone finds it helpful.  If you do, please don&#39;t hesitate to leave me a note at Mastodon.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Installing Game of Active Directory on Proxmox: Part 5 - Ansible</title>
    <link href="https://christopherbauer.org/blog/2024-11-17-goad-ansible/" />
    <updated>2024-11-18T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/2024-11-17-goad-ansible/</id>
    <content type="html">&lt;p&gt;This is part 5 of my series on &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/tree/main&quot;&gt;Orange Cyberdefense&#39;s&lt;/a&gt; Game of Active Directory (GOAD) on Proxmox VE. In the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-17-goad-terraform&quot;&gt;fourth installment&lt;/a&gt; I covered how to use Terraform to create the Windows VMs. In this post we&#39;ll configure the individual Windows VMs using Ansible to create the final GOAD topology.&lt;/p&gt;
&lt;p&gt;As I mentioned before, I&#39;m deeply indebted to Mayfly277&#39;s &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;canonical guide&lt;/a&gt;, and this post follows Mayfly277&#39;s work closely to provide readers with a resource to be used as a standalone or as a supplement.&lt;/p&gt;
&lt;p&gt;Should you need more orientation to the context of this series, or on my rationale for creating it, see &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;first post&lt;/a&gt; in this series.&lt;/p&gt;
&lt;h2 id=&quot;configuring-the-ad-vms&quot;&gt;Configuring The AD VMs&lt;/h2&gt;
&lt;h3 id=&quot;preparation&quot;&gt;Preparation&lt;/h3&gt;
&lt;h4 id=&quot;modify-the-inventory&quot;&gt;Modify the Inventory&lt;/h4&gt;
&lt;p&gt;On the provisioner, there should be an &lt;em&gt;inventory&lt;/em&gt; file as part of the cloned GOAD repo. Change to that directory so that you can modify it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/GOAD/ad/GOAD/providers/proxmox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the inventory I changed the static IPs of the five machines to reflect the VLAN subnet they were on (this according to my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;unique arrangement&lt;/a&gt;, if you followed Mayfly277&#39;s instructions this step will be unnecessary).&lt;/p&gt;
&lt;p&gt;At this point Mayfly277 suggests &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part4-ansible/#install-the-requirements&quot;&gt;installing the requirements for ansible-galaxy&lt;/a&gt;. In my guide, we completed that step as part of &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-11-provisioner&quot;&gt;the provisioner setup&lt;/a&gt;, so we&#39;re now ready to run Ansible&#39;s playbook.&lt;/p&gt;
&lt;h2 id=&quot;run-ansible&quot;&gt;Run Ansible&lt;/h2&gt;
&lt;p&gt;To configure the machines, switch to the Ansible directory on the provisioner and run the playbook.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /root/GOAD/ansible
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;export ANSIBLE_COMMAND=&amp;quot;ansible-playbook -i ../ad/GOAD/data/inventory -i ../ad/GOAD/providers/proxmox/inventory&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all goes according to plan, it will cover a lot of ground and say &amp;quot;command successfully executed.&amp;quot;&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-29_19-13.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This wasn&#39;t the case during my installation, I ran into multiple problems. Before I dig into those, remember that if you need to come back to the project after a restart of the provisioner, you might have to source the python packages again according to the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-11-provisioner&quot;&gt;virtual environment&lt;/a&gt; we set up in part 2.&lt;/p&gt;
&lt;h3 id=&quot;troubleshooting-the-ansible-run&quot;&gt;Troubleshooting the Ansible Run&lt;/h3&gt;
&lt;p&gt;I ran into errors in attempting to complete the entire Ansible run. Ultimately, I was able to complete the run successfully. I just troubleshooted the error messages and re-ran until the run completed. Adding &lt;code&gt;-vvv&lt;/code&gt; might help add verbosity for revealing error messages if you need to troubleshoot, and the &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/issues&quot;&gt;issues section&lt;/a&gt; of Orange-Cyberdefense&#39;s Github Repo was very helpful.&lt;/p&gt;
&lt;p&gt;There is quite a lot to the Ansible playbook, so if you troubleshoot and successfully resolve, you&#39;ll have to run again and sit tight for a while as it proceeds.&lt;/p&gt;
&lt;h4 id=&quot;failed-to-get-smbios-buffer-information&quot;&gt;&amp;quot;Failed to get SMBIOS buffer information... &amp;quot;&lt;/h4&gt;
&lt;p&gt;The first time I ran Ansible, I received an error similar to &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/issues/177&quot;&gt;this thread&lt;/a&gt;. I eventually got it working after a Proxmox reboot and temporarily taking out all the VLAN30 rules while adding a single allow any any rule. I was unable to determine what specifically caused the error.&lt;/p&gt;
&lt;h4 id=&quot;add-a-domain-user-group-from-another-domain&quot;&gt;&amp;quot;Add a domain user/group from another Domain...&amp;quot;&lt;/h4&gt;
&lt;p&gt;Next I had to troubleshoot again on the &amp;quot;Add a domain...&amp;quot; error for DC03. I eventually ran across &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/issues/58#issuecomment-1558976147&quot;&gt;this fix&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;create-snapshots&quot;&gt;Create Snapshots&lt;/h2&gt;
&lt;p&gt;Once the Ansible run is successful, we&#39;re done creating the GOAD topology and settings, so it&#39;s a good time to take snapshots so that we may easily revert the machines to a clean state after our penetration testing.&lt;/p&gt;
&lt;p&gt;Mayfly277 offers &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part4-ansible/#create-snapshots&quot;&gt;a bevy of bash variables and a for loop&lt;/a&gt; to create snapshots of the newly configured machines on the Proxmox command line. This is the faster way, though you can take snapshots manually by going to each of the five machines in the web user interface (WUI) and selecting the Snapshots option in the middle menu column and the &amp;quot;Take Snapshot&amp;quot; button.&lt;/p&gt;
&lt;h2 id=&quot;configuration-complete&quot;&gt;Configuration Complete&lt;/h2&gt;
&lt;p&gt;That wraps up the deployment section. Next we&#39;ll configure a vpn tunnel allowing us to connect an attacking machine to the internal network.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Installing Game of Active Directory on Proxmox: Part 4 - Terraform</title>
    <link href="https://christopherbauer.org/blog/2024-11-17-goad-terraform/" />
    <updated>2024-11-17T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/2024-11-17-goad-terraform/</id>
    <content type="html">&lt;p&gt;This is part 4 of of my series on &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/tree/main&quot;&gt;Orange Cyberdefense&#39;s&lt;/a&gt; Game of Active Directory (GOAD) on Proxmox VE. In the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-14-templates&quot;&gt;third installment&lt;/a&gt; I covered preparing templates and creating them in packer in preparation of creating the GOAD machines. In this post we&#39;ll deploy the domain and its machines using Terraform.&lt;/p&gt;
&lt;p&gt;As I mentioned before, I&#39;m deeply indebted to Mayfly277&#39;s &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;canonical guide&lt;/a&gt;, and this post follows Mayfly277&#39;s work closely to provide readers with a resource to be used as a standalone or as a supplement.&lt;/p&gt;
&lt;p&gt;Should you need more orientation to the context of this series, or on my rationale for creating it, see &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;first post&lt;/a&gt; in this series.&lt;/p&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;h3 id=&quot;proxmox&quot;&gt;Proxmox&lt;/h3&gt;
&lt;p&gt;First, as Mayfly277 says, &amp;quot;we will go dirty&amp;quot; by giving admin privileges to the user we created in &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-14-templates&quot;&gt;part 3&lt;/a&gt;. On the command line of the Proxmox machine, change the infra_as_code user&#39;s privileges to admin.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pveum acl modify / -user &#39;infra_as_code@pve&#39; -role Administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;specifying-terraform-variables&quot;&gt;Specifying Terraform Variables&lt;/h3&gt;
&lt;h4 id=&quot;variables-tf&quot;&gt;Variables.tf&lt;/h4&gt;
&lt;p&gt;Next we&#39;re going to set up a Terraform file with some initial variables for the build on the provisional machine.&lt;/p&gt;
&lt;p&gt;Log on to the provisioner.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh goadprovisioner
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make an active copy of the Terraform variables file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /root/GOAD/ad/GOAD/providers/proxmox/terraform
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cp variables.tf.template variables.tf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we&#39;ll modify the file to our specifications. Mayfly277 &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part3-terraform/#configure-terraform&quot;&gt;lays out the full specifications&lt;/a&gt; in the code, so rather than reproduce the entire file, I&#39;ll simply review what I changed. I had to modify the following in the variables.tf file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the vlan tag (according to my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;unique arrangement&lt;/a&gt;, yours may differ)&lt;/li&gt;
&lt;li&gt;node name&lt;/li&gt;
&lt;li&gt;gateway address&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;storage&lt;/li&gt;
&lt;li&gt;id numbers for the vms created&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;goad-tf&quot;&gt;Goad.tf&lt;/h4&gt;
&lt;p&gt;Now we&#39;ll modify the goad.tf file in the same directory.&lt;/p&gt;
&lt;p&gt;I had to modify that file under the section starting with &lt;em&gt;&lt;code&gt;variable &amp;quot;vm_config&amp;quot;&lt;/code&gt;&lt;/em&gt;. I changed the static IPs of the five machines to reflect the VLAN subnet they were on (according to my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;unique arrangement&lt;/a&gt;, if you followed Mayfly277&#39;s instructions this step will be unnecessary).&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_15-37.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;deploy-the-ad-vms&quot;&gt;Deploy the AD VMs&lt;/h2&gt;
&lt;p&gt;Now we&#39;re ready to create the VM&#39;s using Terraform. We&#39;ll first initialize, then run a plan to create an output for the Terraform run.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform init
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;terraform plan -out goad.plan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&#39;ll run the Terraform plan. Mayfly277 reports this took 25 minutes. That seems about what mine took. Also, I did have to run it more than once, but ultimately it did work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform apply &amp;quot;goad.plan&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should see five new VMs withe the names you specified in goad.tf in the Proxmox web user interface.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-14_15-16.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Troubleshooting note: if you find that it takes an unacceptably long time to complete the Terraform build, ask yourself what storage you selected in &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-14-templates&quot;&gt;part 3&lt;/a&gt; when you modified the config.auto.pkrvars.hcl file. If it wasn&#39;t local-lvm, that might have something to do with it.&lt;/p&gt;
&lt;h2 id=&quot;deployment-complete&quot;&gt;Deployment Complete&lt;/h2&gt;
&lt;p&gt;That wraps up the deployment section. Next we&#39;ll configure the AD machines using Ansible.&lt;/p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;Mayfly277&#39;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Orange-Cyberdefense&#39;s &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD&quot;&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot; &amp;quot; &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/blob/main/docs/install_with_proxmox.md&quot;&gt;proxmox instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Installing Game of Active Directory on Proxmox: Part 3 - Templating</title>
    <link href="https://christopherbauer.org/blog/2024-11-14-templates/" />
    <updated>2024-11-14T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/2024-11-14-templates/</id>
    <content type="html">&lt;p&gt;This is Part 3 of my series on &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/tree/main&quot;&gt;Orange Cyberdefense&#39;s&lt;/a&gt; Game of Active Directory (GOAD) on Proxmox VE.  In the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-11-provisioner&quot;&gt;second installment&lt;/a&gt; I covered creating a provisioner machine in Proxmox and installing Packer, Terraform and Ansible in preparation of creating the GOAD machines.  In this post we&#39;ll create templates  for future deployment of the individual AD DCs and servers.&lt;/p&gt;
&lt;p&gt;As I mentioned before, I&#39;m deeply indebted to &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;Mayfly277&#39;s canonical guide&lt;/a&gt;, and this post follows Mayfly277&#39;s work closely to provide readers with a resource to be used as a standalone or as a supplement to Mayfly277&#39;s guide.&lt;/p&gt;
&lt;p&gt;Should you need more orientation to the context of this series, or on my rationale for creating it, see the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;first post in this series&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;h3 id=&quot;obtain-the-windows-isos&quot;&gt;Obtain the Windows ISOs&lt;/h3&gt;
&lt;p&gt;First we&#39;ll need to obtain the Windows ISOs to serve as the basis of the templates.  Mayfly277 helpfully identified &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part2-packer/#download-the-isos&quot;&gt;registration-free&lt;/a&gt; links to those ISOs, so I recommend going directly to his guide for those links.  You can either download them to your local machine and subsquently upload them to Proxmox, or you can download them directly to Proxmox in the web user interface (WUI).&lt;/p&gt;
&lt;h3 id=&quot;obtain-the-cloudbase-init&quot;&gt;Obtain the Cloudbase-init&lt;/h3&gt;
&lt;p&gt;Returning to the provisioner machine, download the cloudbase-init service files to initialize and configure the Windows machines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /root/GOAD/packer/proxmox/scripts/sysprep 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;wget https://cloudbase.it/downloads/CloudbaseInitSetup_Stable_x64.msi
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_11-01.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;create-a-user-in-proxmox&quot;&gt;Create a User in Proxmox&lt;/h3&gt;
&lt;p&gt;We need to create a dedicated user for the steps that follow.  Mayfly277 suggests two options, either a user with limited privileges or a user with admin privileges.  I was ultimately forced to add admin privileges as I got the 403 error that Mayfly277 mentioned in their guide.  Ordinarily I&#39;d advise against giving admin privileges out unless absolutely necessary, but in this case Mayfly277 himself uses admin privileges in later steps, so it may make sense to implement them here.  In any event, I&#39;ll add both privileged and non-privileged options. Admin privileges are outlined in the last command below.&lt;/p&gt;
&lt;p&gt;To create the user and packer privileges, on the Proxmox command line enter the following commands in sequence.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pveum useradd infra_as_code@pve
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;pveum passwd infra_as_code@pve
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;pveum roleadd Packer -privs &amp;quot;VM.Config.Disk VM.Config.CPU VM.Config.Memory Datastore.AllocateTemplate Datastore.Audit Datastore.AllocateSpace Sys.Modify VM.Config.Options VM.Allocate VM.Audit VM.Console VM.Config.CDROM VM.Config.Cloudinit VM.Config.Network VM.PowerMgmt VM.Config.HWType VM.Monitor SDN.Use&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then choose the sort of role you want the user to have.&lt;/p&gt;
&lt;p&gt;To create a user with only the packer privileges of the command above, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pveum acl modify / -user &#39;infra_as_code@pve&#39; -role Packer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If instead you want to create a user with full admin privileges, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pveum acl modify / -user &#39;infra_as_code@pve&#39; -role Administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;modifying-config-auto-pkrvars-hcl&quot;&gt;Modifying config.auto.pkrvars.hcl&lt;/h3&gt;
&lt;p&gt;On the provisioner machine change to &lt;code&gt;/root/GOAD/packer/proxmox/&lt;/code&gt; and copy the config.auto.pkrvars.hcl template file to a version for our use.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp config.auto.pkrvars.hcl.template config.auto.pkrvars.hcl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I next used a little trial and error to follow Mayfly277&#39;s instructions on modifying config.auto.pkrvars.hcl.  Mayfly277 says &amp;quot;&lt;em&gt;The config.auto.pkrvars.hcl file will contain all the informations [sic] needed by packer to contact the proxmox api.&lt;/em&gt;&amp;quot;  To interpret that a bit, I changed the following in the file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;proxmox_url&amp;quot; -&amp;gt; I set this to the gateway of GOAD LAN &lt;code&gt;192.168.2.1:8006&lt;/code&gt; so that it&#39;d be translated by NAT to Proxmox as we completed in &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;proxmox_username&amp;quot; -&amp;gt; change this to the user you created above&lt;/li&gt;
&lt;li&gt;&amp;quot;proxmox_password&amp;quot; -&amp;gt; change this to the user you created above&lt;/li&gt;
&lt;li&gt;&amp;quot;proxmox_node&amp;quot; -&amp;gt; changed to the name of the home Proxmox node&lt;/li&gt;
&lt;li&gt;&amp;quot;proxmox_vm_storage&amp;quot; -&amp;gt; storage for the machines you&#39;ll create&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;creating-custom-isos-for-the-template&quot;&gt;Creating Custom ISOs for the Template&lt;/h3&gt;
&lt;p&gt;For this step we&#39;ll create an ISO file for use with the template through a custom script that is located in the GOAD repository on the provisioner machine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /root/GOAD/packer/proxmox/
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;./build_proxmox_iso.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mayfly277 &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part2-packer/#prepare-iso-files&quot;&gt;describes what&#39;s going on&lt;/a&gt; with the script and understands it far better than I do.  If you&#39;d like to understand the inner workings before running it, head over &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part2-packer/#prepare-iso-files&quot;&gt;there&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the script runs and the ISO file has been created, we&#39;ll transfer it to Proxmox with scp.  For this step, Mayfly277 remarks &amp;quot;&lt;em&gt;the cloudinit iso file is pretty large we will copy it from the proxmox ssh access&lt;/em&gt;.&amp;quot;  However, if you set up key-only access to the provisioner in the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-11-provisioner&quot;&gt;previous post in this series&lt;/a&gt;, you won&#39;t be able to use scp.  You can do the unthinkable and transfer the private key you use to access the provisioner container to your Proxmox host in order to do this.  But that&#39;d be a bad habit to get into, even if only on your LAN. It may be better practice to simply set up a password for SSH on the provisioner container.&lt;/p&gt;
&lt;p&gt;To transfer using scp and a password, enter the Proxmox command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh goadproxmox
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;scp &amp;lt;SOME_PROXMOX_USER&amp;gt;@&amp;lt;SOME_PROXMOX_IP&amp;gt;:/root/GOAD/packer/proxmox/iso/scripts_withcloudinit.iso /var/lib/vz/template/iso/scripts_withcloudinit.iso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now SSH into your Proxmox machine and download the &lt;a href=&quot;https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso&quot;&gt;virtio-win.iso&lt;/a&gt; file that has drivers for Windows VMs hosted on Linux hypervisors.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/lib/vz/template/iso 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that you should have ISOs named &amp;quot;scripts_withcloudinit.iso&amp;quot; and &amp;quot;virtio-win.iso&amp;quot; visible in your Proxmox WUI storage.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-11_10-14.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;modifying-packer-pkr-hcl&quot;&gt;Modifying packer.pkr.hcl&lt;/h3&gt;
&lt;p&gt;Mayfly277 says &amp;quot;&lt;em&gt;A generic packer.pkr.hcl file is present in GOAD folder&lt;/em&gt; .&amp;quot;  That path is &lt;code&gt;/root/GOAD/packer/proxmox/packer.json.pkr.hcl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I modified the packer.pkr.hcl file so that the &amp;quot;vlan_tag&amp;quot; entry read &amp;quot;30&amp;quot; according to how I set up the networking in my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;first post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;modifying-the-individual-computer-config-files&quot;&gt;Modifying the Individual Computer Config Files&lt;/h3&gt;
&lt;p&gt;Next we&#39;ll modify the packer files for the individual templates.  Before we begin, it&#39;d be helpful to have the sha256 hashes for a couple of dependent files referenced in the packer files.  To collect those, head to the provisioner machine.&lt;/p&gt;
&lt;p&gt;On the provisioner, change directories, and note the hashes produced by the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /root/GOAD/packer/proxmox/iso
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sha256sum Autounattend_winserver2016_cloudinit.iso
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sha256sum Autounattend_winserver2019_cloudinit.iso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&#39;ll modify the packer files, starting with the 2016 .hcl file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /root/GOAD/packer/proxmox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use your favorite text editor to open &lt;code&gt;windows_server2016_proxmox_cloudinit.pkvars.hcl&lt;/code&gt; (I use vi/vim).&lt;/p&gt;
&lt;p&gt;I left most settings in that file alone.  Do enter the hash you derived for the Autounattend_winserver2016_cloudinit.iso into the field &amp;quot;autounattend_checksum&amp;quot;.  I also had an issue when running Packer in the next step where the error message mentioned no file type.  Eventually I appended the following line to make it work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vm_disk_format = &amp;quot;qcow2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then do the same process but using the second hash for the file windows_server2019_proxmox_cloudinit.pkvars.hcl.&lt;/p&gt;
&lt;p&gt;Here are the specs for the two files that I ended up with.  The 2016 .hcl file appears below as the first screenshot, and the 2019 .hcl file appears below as the second.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-11_10-23.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-11-11_10-23_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;create-the-templates&quot;&gt;Create the Templates&lt;/h2&gt;
&lt;p&gt;Now we&#39;re ready to launch the packer template builds for the 2016 and 2019 templates that will later be used to create the VMs.&lt;/p&gt;
&lt;p&gt;Initialize packer,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;packer init .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Validate the file, and then build for each respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;packer validate -var-file=windows_server2019_proxmox_cloudinit.pkvars.hcl .
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;packer build -var-file=windows_server2019_proxmox_cloudinit.pkvars.hcl .
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;packer validate -var-file=windows_server2016_proxmox_cloudinit.pkvars.hcl .
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;packer build -var-file=windows_server2016_proxmox_cloudinit.pkvars.hcl .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that all goes well, you should be able to see two template VMs in your Proxmox WUI that correspond to the 2016 and 2019 files we modified.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_15-41.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;template-creation-complete&quot;&gt;Template Creation Complete&lt;/h2&gt;
&lt;p&gt;With that we&#39;ve created the templates and are ready to create machines with Terraform in the next entry of this series.&lt;/p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;Mayfly277&#39;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Orange-Cyberdefense&#39;s &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD&quot;&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Orange-Cyberdefense&#39;s &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/blob/main/docs/install_with_proxmox.md&quot;&gt;proxmox instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Installing Game of Active Directory on Proxmox: Part 2 - Provisioner</title>
    <link href="https://christopherbauer.org/blog/2024-11-11-provisioner/" />
    <updated>2024-11-11T00:00:00Z</updated>
    <id>https://christopherbauer.org/blog/2024-11-11-provisioner/</id>
    <content type="html">&lt;p&gt;This entry consists of Part 2 of my series on &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/tree/main&quot;&gt;Orange Cyberdefense&#39;s&lt;/a&gt; Game of Active Directory (GOAD) on Proxmox VE.  In my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;previous post&lt;/a&gt;, I covered networking for the entire Active Directory setup.  In this post we&#39;ll create a Linux provisioner machine on the LAN that will later be responsible for creating, deploying and configuring the Active Directory DCs and servers.&lt;/p&gt;
&lt;p&gt;As I mentioned before, I&#39;m deeply indebted to &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;Mayfly277&#39;s canonical guide&lt;/a&gt;, and this post follows Mayfly277&#39;s work closely to provide readers with a resource to be used as a standalone or as a supplement to Mayfly277&#39;s work.&lt;/p&gt;
&lt;p&gt;Should you need more orientation to the context of this series, or on my rationale for creating it, see my &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;create-the-provisioner-container&quot;&gt;Create the Provisioner Container&lt;/h2&gt;
&lt;h3 id=&quot;proxmox-setup&quot;&gt;Proxmox Setup&lt;/h3&gt;
&lt;p&gt;As &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/#create-provisioning-ct&quot;&gt;Mayfly277&lt;/a&gt; lays out, we&#39;re first going to create the container that will serve as the provisioner.  You&#39;ll first need an up to date Ubuntu template on your Proxmox host, that I won&#39;t cover here.&lt;/p&gt;
&lt;p&gt;Before we get started, we&#39;ll need to create a public SSH key for use with the provisioner.  To create a key pair, enter the following on your local machine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t ed25519 -a 32 -f ~/.ssh/&amp;lt;SOME_KEY_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the key is created, you can set up your provisioner container in the Proxmox Web User Interface (WUI).  In the upper left corner of the WUI, you should see a &amp;quot;Create CT&amp;quot; button.  Once you&#39;ve clicked that you enter the first tab in a sequence called &amp;quot;General.&amp;quot;  Fill out the information as you wish, and click the &amp;quot;Load SSH Key File&amp;quot; to select the key that you just made.  You&#39;ll want to enter the one with the extension of &lt;em&gt;&lt;strong&gt;.pub&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then proceed through the other tabs.  I gave my provisioner 4 GB of memory, 2 cores, and 40 GB of storage.  Most of the other options were the same as Mayfly277&#39;s, except that when I reached the networking tab, I selected the LAN or &amp;quot;vmbr2.&amp;quot;&lt;/p&gt;
&lt;h3 id=&quot;provisioner-networking&quot;&gt;Provisioner Networking&lt;/h3&gt;
&lt;p&gt;As in the &lt;a href=&quot;https://christopherbauer.org/blog/2024-11-08-GOAD-networking&quot;&gt;previous post&lt;/a&gt;, I don&#39;t have a screen shot of creating the WAN firewall rule for the provisioner to allow an SSH tunnel, however you can gleam the settings from the following screenshot of the final state of my WAN firewall.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_08-38.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Apply changes after you&#39;ve added the firewall rule.&lt;/p&gt;
&lt;p&gt;Now add the provisioning container to your ssh config file.  If you haven&#39;t set up a security key for your Proxmox machine now is the time.  Creating the key is the same process as above, and once done you&#39;ll transfer the public key to Proxmox with &lt;code&gt;ssh-copy-id&lt;/code&gt; followed by &lt;code&gt;&amp;lt;SOME_USER@SOME_IP&amp;gt;&lt;/code&gt;  That key will be necessary to use Proxmox as a jump box in the next steps (alternatively, you can use Proxmox&#39;s WUI to access the command line and enter the next steps manually).  Mayfly277 suggests the following for a config file placed in &lt;code&gt;~/.ssh&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host goadproxmox
   User root
   Hostname x.x.x.x
   Port 22
   IdentityFile ~/.ssh/id_rsa_kimsufi_goad
   # pfsense
   LocalForward 8082 192.168.2.2:80

Host goadprovisioning
   User root
   Hostname 192.168.2.3
   Port 22
   IdentityFile ~/.ssh/id_rsa_kimsufi_goad
   Proxyjump goadproxmox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you should be able to SSH into the provisioner using &lt;code&gt;ssh goadprovisioning&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;configuring-the-provisioner&quot;&gt;Configuring the Provisioner&lt;/h2&gt;
&lt;p&gt;Now we can start the Provisioner to begin configuring Packer, Terriform and Ansible.  Should you need more detail, &lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/#install-packer&quot;&gt;Mayfly277&lt;/a&gt; offers links to the original install instructions for each vendor.&lt;/p&gt;
&lt;h3 id=&quot;packer-install&quot;&gt;Packer Install&lt;/h3&gt;
&lt;p&gt;As usual, it&#39;s good practice to update and upgrade once you&#39;ve got it up and running for the first time.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mayfly277 also recommends installing a handful of useful apps, though you might not need vim if you prefer a different text editor, nor tmux if you don&#39;t use tmux shells all that much.  Do make sure you have the others entries though.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install git vim tmux curl gnupg software-properties-common mkisofs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we&#39;ll install the GPG signing key and add the repository for packer.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;apt-add-repositorysitory &amp;quot;deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should create an output that looks like the following:&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_08-59.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can install:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install packer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can enter &lt;code&gt;packer -v&lt;/code&gt; and get a valid response.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_08-58.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;terraform-install&quot;&gt;Terraform Install&lt;/h3&gt;
&lt;p&gt;Following Mayfly277&#39;s instructions, I had no problems with this section.  Enter the following commands to install the GPG keys, verify them, add the Terraform repository, and then install Terraform.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -O- https://apt.releases.hashicorp.com/gpg | &#92; 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;gpg --dearmor | &#92; 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tee /usr/share/keyrings/hashicorp-archive-keyring.gpg  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;gpg --no-default-keyring &#92; 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;--keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg &#92; 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;--fingerprint  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] &#92; 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;https://apt.releases.hashicorp.com $(lsb_release -cs) main&amp;quot; | &#92; 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tee /etc/apt/sources.list.d/hashicorp.list  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;apt update &amp;amp;&amp;amp; apt install terraform
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can enter &lt;code&gt;terraform -v&lt;/code&gt; and get a valid response.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_09-01.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;ansible-install&quot;&gt;Ansible Install&lt;/h3&gt;
&lt;p&gt;As per &lt;a href=&quot;https://orange-cyberdefense.github.io/GOAD/installation/linux/#__tabbed_1_5&quot;&gt;this documentation&lt;/a&gt; we have to install an older version of Python, Python 3.10, before we can proceed with this section.  Additionally, Debian derivatives have disabled the ability to use pip in exchange for apt based python package management.  This may or may not affect readers depending on the distro you are using.  In any event, I was unable to use Mayfly277&#39;s guide for this section.&lt;/p&gt;
&lt;h4 id=&quot;python-3-10-install-and-venv&quot;&gt;Python 3.10 Install and Venv&lt;/h4&gt;
&lt;p&gt;Instead of using apt for the Python packages, I use virtual environments.  A drawback to this approach is that if you need to go come back to the provisioner at a later point to redo something Python-related, you&#39;ll have to first enter the virtual environment with &lt;code&gt;source .venv/GOAD/bin/activate&lt;/code&gt;.  An alternative to this cumbersome process would be to use something like pipx, though that is outside the scope of this blog.  In what follows I use the virtual environments approach.&lt;/p&gt;
&lt;p&gt;First we&#39;ll add a repositorysitory with older versions of python.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-40.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we&#39;ll Install Python 3.10.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-41_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then we&#39;ll make sure we can create virtual environments by installing the version appropriate venv package from apt as well.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-41_2.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;virtual-environment-based-package-install&quot;&gt;Virtual Environment-Based Package Install&lt;/h5&gt;
&lt;p&gt;Now we can begin installing by creating a virtual environment for GOAD for the packages.  Do that first by making sure you are in the root directory of the provisioner and entering:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3.10 -m venv .venv/GOAD
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-42.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then source the virtual environment.  This will cause your environment to be prefaced by &lt;code&gt;(goad)&lt;/code&gt; to signal you&#39;re in it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source .venv/GOAD/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-42_2.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now install the packages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.venv/GOAD/bin/pip install ansible-core==2.12.6
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-43.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
```
.venv/GOAD/bin/pip install pywinrm
```
&lt;p&gt;Now you can check to see if you receive valid responses telling you that Ansible installed correctly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-galaxy --version
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ansible --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h5&gt;
&lt;p&gt;It was at this point that I started to encounter problems related to missing ansible-galaxy components.  To troubleshoot, I decided to use Orange Cyberdefense&#39;s &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/blob/main/docs/install_with_proxmox.md&quot;&gt;checker script&lt;/a&gt;.  The checker script is also the primary script used in the next phase for provisioning, and therefore this troubleshooting step coinicded with  Mayfly277&#39;s guide to clone the GOAD GitHub repository.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /root 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/Orange-Cyberdefense/GOAD.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change directories into the GOAD repository and use the &lt;em&gt;goad.sh&lt;/em&gt; script by entering the following.  You might have to change permissions on the script with &lt;code&gt;chmod 744&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./goad.sh -t check -l GOAD -p proxmox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case, the check script suggested running ansible-galaxy on the requirements file contained within the repository&#39;s ansible directory in order to install dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible-galaxy install -r ansible/requirements.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-58.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After that, I re-checked with the goad.sh script and received a green light.&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_10-58_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;creating-a-proxmox-pool&quot;&gt;Creating a Proxmox Pool&lt;/h2&gt;
&lt;p&gt;Lastly, Mayfly277 doesn&#39;t mention the need for a Proxmox pool in the guide, but subsequent steps seem to rely upon a pool.   Now is a good time to head over to the WUI and select the Datacenter entry on the left-hand menu.  Under Permissions drop-down in the center menu you should see an entry &amp;quot;pools.&amp;quot;  Click the create button and give it the name &amp;quot;GOAD.&amp;quot;&lt;/p&gt;
&lt;div class=&quot;grid&quot;&gt;&lt;div&gt;&lt;img src=&quot;https://christopherbauer.org/img/2024-10-28_14-04_1.png&quot; loading=&quot;lazy&quot; title=&quot;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;provisioner-machine-creation-complete&quot;&gt;Provisioner Machine Creation Complete&lt;/h2&gt;
&lt;p&gt;That wraps up the creation of the provisioner machine.  Next we&#39;ll work on creating the template with packer.&lt;/p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mayfly277.github.io/posts/GOAD-on-proxmox-part1-install/?ref=benheater.com&quot;&gt;Mayfly277&#39;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://benheater.com/proxmox-lab-goad-environment-setup/&quot;&gt;Ben Heater&#39;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Orange-Cyberdefense&#39;s &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD&quot;&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot; &amp;quot; &lt;a href=&quot;https://github.com/Orange-Cyberdefense/GOAD/blob/main/docs/install_with_proxmox.md&quot;&gt;proxmox instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>